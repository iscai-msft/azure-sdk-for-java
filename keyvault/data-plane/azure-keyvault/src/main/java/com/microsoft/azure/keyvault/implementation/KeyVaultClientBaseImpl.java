/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.keyvault.implementation;

import com.azure.common.ServiceClient;
import com.azure.common.annotations.BodyParam;
import com.azure.common.annotations.DELETE;
import com.azure.common.annotations.ExpectedResponses;
import com.azure.common.annotations.GET;
import com.azure.common.annotations.Host;
import com.azure.common.annotations.HostParam;
import com.azure.common.annotations.PATCH;
import com.azure.common.annotations.PathParam;
import com.azure.common.annotations.POST;
import com.azure.common.annotations.PUT;
import com.azure.common.annotations.QueryParam;
import com.azure.common.annotations.UnexpectedResponseExceptionType;
import com.azure.common.http.HttpPipeline;
import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleRestResponse;
import com.azure.common.implementation.RestProxy;
import com.azure.common.implementation.Validator;
import com.microsoft.azure.keyvault.KeyVaultClientBase;
import com.microsoft.azure.keyvault.models.BackupCertificateResult;
import com.microsoft.azure.keyvault.models.BackupKeyResult;
import com.microsoft.azure.keyvault.models.BackupSecretResult;
import com.microsoft.azure.keyvault.models.BackupStorageResult;
import com.microsoft.azure.keyvault.models.CertificateAttributes;
import com.microsoft.azure.keyvault.models.CertificateBundle;
import com.microsoft.azure.keyvault.models.CertificateCreateParameters;
import com.microsoft.azure.keyvault.models.CertificateImportParameters;
import com.microsoft.azure.keyvault.models.CertificateIssuerListResult;
import com.microsoft.azure.keyvault.models.CertificateIssuerSetParameters;
import com.microsoft.azure.keyvault.models.CertificateIssuerUpdateParameters;
import com.microsoft.azure.keyvault.models.CertificateListResult;
import com.microsoft.azure.keyvault.models.CertificateMergeParameters;
import com.microsoft.azure.keyvault.models.CertificateOperation;
import com.microsoft.azure.keyvault.models.CertificateOperationUpdateParameter;
import com.microsoft.azure.keyvault.models.CertificatePolicy;
import com.microsoft.azure.keyvault.models.CertificateRestoreParameters;
import com.microsoft.azure.keyvault.models.CertificateUpdateParameters;
import com.microsoft.azure.keyvault.models.Contacts;
import com.microsoft.azure.keyvault.models.DeletedCertificateBundle;
import com.microsoft.azure.keyvault.models.DeletedCertificateListResult;
import com.microsoft.azure.keyvault.models.DeletedKeyBundle;
import com.microsoft.azure.keyvault.models.DeletedKeyListResult;
import com.microsoft.azure.keyvault.models.DeletedSasDefinitionBundle;
import com.microsoft.azure.keyvault.models.DeletedSasDefinitionListResult;
import com.microsoft.azure.keyvault.models.DeletedSecretBundle;
import com.microsoft.azure.keyvault.models.DeletedSecretListResult;
import com.microsoft.azure.keyvault.models.DeletedStorageBundle;
import com.microsoft.azure.keyvault.models.DeletedStorageListResult;
import com.microsoft.azure.keyvault.models.IssuerAttributes;
import com.microsoft.azure.keyvault.models.IssuerBundle;
import com.microsoft.azure.keyvault.models.IssuerCredentials;
import com.microsoft.azure.keyvault.models.JsonWebKey;
import com.microsoft.azure.keyvault.models.JsonWebKeyCurveName;
import com.microsoft.azure.keyvault.models.JsonWebKeyEncryptionAlgorithm;
import com.microsoft.azure.keyvault.models.JsonWebKeyOperation;
import com.microsoft.azure.keyvault.models.JsonWebKeySignatureAlgorithm;
import com.microsoft.azure.keyvault.models.JsonWebKeyType;
import com.microsoft.azure.keyvault.models.KeyAttributes;
import com.microsoft.azure.keyvault.models.KeyBundle;
import com.microsoft.azure.keyvault.models.KeyCreateParameters;
import com.microsoft.azure.keyvault.models.KeyImportParameters;
import com.microsoft.azure.keyvault.models.KeyListResult;
import com.microsoft.azure.keyvault.models.KeyOperationResult;
import com.microsoft.azure.keyvault.models.KeyOperationsParameters;
import com.microsoft.azure.keyvault.models.KeyRestoreParameters;
import com.microsoft.azure.keyvault.models.KeySignParameters;
import com.microsoft.azure.keyvault.models.KeyUpdateParameters;
import com.microsoft.azure.keyvault.models.KeyVaultErrorException;
import com.microsoft.azure.keyvault.models.KeyVerifyParameters;
import com.microsoft.azure.keyvault.models.KeyVerifyResult;
import com.microsoft.azure.keyvault.models.OrganizationDetails;
import com.microsoft.azure.keyvault.models.SasDefinitionAttributes;
import com.microsoft.azure.keyvault.models.SasDefinitionBundle;
import com.microsoft.azure.keyvault.models.SasDefinitionCreateParameters;
import com.microsoft.azure.keyvault.models.SasDefinitionListResult;
import com.microsoft.azure.keyvault.models.SasDefinitionUpdateParameters;
import com.microsoft.azure.keyvault.models.SasTokenType;
import com.microsoft.azure.keyvault.models.SecretAttributes;
import com.microsoft.azure.keyvault.models.SecretBundle;
import com.microsoft.azure.keyvault.models.SecretListResult;
import com.microsoft.azure.keyvault.models.SecretRestoreParameters;
import com.microsoft.azure.keyvault.models.SecretSetParameters;
import com.microsoft.azure.keyvault.models.SecretUpdateParameters;
import com.microsoft.azure.keyvault.models.StorageAccountAttributes;
import com.microsoft.azure.keyvault.models.StorageAccountCreateParameters;
import com.microsoft.azure.keyvault.models.StorageAccountRegenerteKeyParameters;
import com.microsoft.azure.keyvault.models.StorageAccountUpdateParameters;
import com.microsoft.azure.keyvault.models.StorageBundle;
import com.microsoft.azure.keyvault.models.StorageListResult;
import com.microsoft.azure.keyvault.models.StorageRestoreParameters;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * Initializes a new instance of the KeyVaultClientBase type.
 */
public class KeyVaultClientBaseImpl extends ServiceClient implements KeyVaultClientBase {
    /**
     * The proxy service used to perform REST calls.
     */
    private KeyVaultClientBaseService service;

    /**
     * Client API version.
     */
    private String apiVersion;

    /**
     * Gets Client API version.
     *
     * @return the apiVersion value.
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /**
     * Sets Client API version.
     *
     * @param apiVersion the apiVersion value.
     * @return the service client itself.
     */
    public KeyVaultClientBaseImpl withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * Initializes an instance of KeyVaultClientBase client.
     */
    public KeyVaultClientBaseImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of KeyVaultClientBase client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public KeyVaultClientBaseImpl(@NonNull HttpPipeline httpPipeline) {
        super(httpPipeline);
        this.service = RestProxy.create(KeyVaultClientBaseService.class, this);
    }

    /**
     * The interface defining all the services for KeyVaultClientBase to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{vaultBaseUrl}")
    private interface KeyVaultClientBaseService {
        @POST("keys/{key-name}/create")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyBundle>> createKey(@PathParam("key-name") String keyName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyCreateParameters parameters);

        @PUT("keys/{key-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyBundle>> importKey(@PathParam("key-name") String keyName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyImportParameters parameters);

        @DELETE("keys/{key-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedKeyBundle>> deleteKey(@PathParam("key-name") String keyName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @PATCH("keys/{key-name}/{key-version}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyBundle>> updateKey(@PathParam("key-name") String keyName, @PathParam("key-version") String keyVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyUpdateParameters parameters);

        @GET("keys/{key-name}/{key-version}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyBundle>> getKey(@PathParam("key-name") String keyName, @PathParam("key-version") String keyVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @GET("keys/{key-name}/versions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyListResult>> getKeyVersions(@PathParam("key-name") String keyName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("keys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyListResult>> getKeys(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @POST("keys/{key-name}/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<BackupKeyResult>> backupKey(@PathParam("key-name") String keyName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("keys/restore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyBundle>> restoreKey(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyRestoreParameters parameters);

        @POST("keys/{key-name}/{key-version}/encrypt")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyOperationResult>> encrypt(@PathParam("key-name") String keyName, @PathParam("key-version") String keyVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyOperationsParameters parameters);

        @POST("keys/{key-name}/{key-version}/decrypt")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyOperationResult>> decrypt(@PathParam("key-name") String keyName, @PathParam("key-version") String keyVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyOperationsParameters parameters);

        @POST("keys/{key-name}/{key-version}/sign")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyOperationResult>> sign(@PathParam("key-name") String keyName, @PathParam("key-version") String keyVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeySignParameters parameters);

        @POST("keys/{key-name}/{key-version}/verify")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyVerifyResult>> verify(@PathParam("key-name") String keyName, @PathParam("key-version") String keyVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyVerifyParameters parameters);

        @POST("keys/{key-name}/{key-version}/wrapkey")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyOperationResult>> wrapKey(@PathParam("key-name") String keyName, @PathParam("key-version") String keyVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyOperationsParameters parameters);

        @POST("keys/{key-name}/{key-version}/unwrapkey")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyOperationResult>> unwrapKey(@PathParam("key-name") String keyName, @PathParam("key-version") String keyVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") KeyOperationsParameters parameters);

        @GET("deletedkeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedKeyListResult>> getDeletedKeys(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("deletedkeys/{key-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedKeyBundle>> getDeletedKey(@PathParam("key-name") String keyName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @DELETE("deletedkeys/{key-name}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<RestVoidResponse> purgeDeletedKey(@PathParam("key-name") String keyName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("deletedkeys/{key-name}/recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<KeyBundle>> recoverDeletedKey(@PathParam("key-name") String keyName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @PUT("secrets/{secret-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SecretBundle>> setSecret(@PathParam("secret-name") String secretName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") SecretSetParameters parameters);

        @DELETE("secrets/{secret-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedSecretBundle>> deleteSecret(@PathParam("secret-name") String secretName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @PATCH("secrets/{secret-name}/{secret-version}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SecretBundle>> updateSecret(@PathParam("secret-name") String secretName, @PathParam("secret-version") String secretVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") SecretUpdateParameters parameters);

        @GET("secrets/{secret-name}/{secret-version}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SecretBundle>> getSecret(@PathParam("secret-name") String secretName, @PathParam("secret-version") String secretVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @GET("secrets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SecretListResult>> getSecrets(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("secrets/{secret-name}/versions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SecretListResult>> getSecretVersions(@PathParam("secret-name") String secretName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("deletedsecrets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedSecretListResult>> getDeletedSecrets(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("deletedsecrets/{secret-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedSecretBundle>> getDeletedSecret(@PathParam("secret-name") String secretName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @DELETE("deletedsecrets/{secret-name}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<RestVoidResponse> purgeDeletedSecret(@PathParam("secret-name") String secretName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("deletedsecrets/{secret-name}/recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SecretBundle>> recoverDeletedSecret(@PathParam("secret-name") String secretName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("secrets/{secret-name}/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<BackupSecretResult>> backupSecret(@PathParam("secret-name") String secretName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("secrets/restore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SecretBundle>> restoreSecret(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") SecretRestoreParameters parameters);

        @GET("certificates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateListResult>> getCertificates(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("includePending") Boolean includePending, @QueryParam("api-version") String apiVersion);

        @DELETE("certificates/{certificate-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedCertificateBundle>> deleteCertificate(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @PUT("certificates/contacts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<Contacts>> setCertificateContacts(@HostParam("vaultBaseUrl") String vaultBaseUrl, @BodyParam("application/json; charset=utf-8") Contacts contacts, @QueryParam("api-version") String apiVersion);

        @GET("certificates/contacts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<Contacts>> getCertificateContacts(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @DELETE("certificates/contacts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<Contacts>> deleteCertificateContacts(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @GET("certificates/issuers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateIssuerListResult>> getCertificateIssuers(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @PUT("certificates/issuers/{issuer-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<IssuerBundle>> setCertificateIssuer(@PathParam("issuer-name") String issuerName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") CertificateIssuerSetParameters parameter);

        @PATCH("certificates/issuers/{issuer-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<IssuerBundle>> updateCertificateIssuer(@PathParam("issuer-name") String issuerName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") CertificateIssuerUpdateParameters parameter);

        @GET("certificates/issuers/{issuer-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<IssuerBundle>> getCertificateIssuer(@PathParam("issuer-name") String issuerName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @DELETE("certificates/issuers/{issuer-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<IssuerBundle>> deleteCertificateIssuer(@PathParam("issuer-name") String issuerName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("certificates/{certificate-name}/create")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateOperation>> createCertificate(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") CertificateCreateParameters parameters);

        @POST("certificates/{certificate-name}/import")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateBundle>> importCertificate(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") CertificateImportParameters parameters);

        @GET("certificates/{certificate-name}/versions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateListResult>> getCertificateVersions(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("certificates/{certificate-name}/policy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificatePolicy>> getCertificatePolicy(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @PATCH("certificates/{certificate-name}/policy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificatePolicy>> updateCertificatePolicy(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @BodyParam("application/json; charset=utf-8") CertificatePolicy certificatePolicy, @QueryParam("api-version") String apiVersion);

        @PATCH("certificates/{certificate-name}/{certificate-version}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateBundle>> updateCertificate(@PathParam("certificate-name") String certificateName, @PathParam("certificate-version") String certificateVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") CertificateUpdateParameters parameters);

        @GET("certificates/{certificate-name}/{certificate-version}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateBundle>> getCertificate(@PathParam("certificate-name") String certificateName, @PathParam("certificate-version") String certificateVersion, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @PATCH("certificates/{certificate-name}/pending")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateOperation>> updateCertificateOperation(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") CertificateOperationUpdateParameter certificateOperation);

        @GET("certificates/{certificate-name}/pending")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateOperation>> getCertificateOperation(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @DELETE("certificates/{certificate-name}/pending")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateOperation>> deleteCertificateOperation(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("certificates/{certificate-name}/pending/merge")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateBundle>> mergeCertificate(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") CertificateMergeParameters parameters);

        @POST("certificates/{certificate-name}/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<BackupCertificateResult>> backupCertificate(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("certificates/restore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateBundle>> restoreCertificate(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") CertificateRestoreParameters parameters);

        @GET("deletedcertificates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedCertificateListResult>> getDeletedCertificates(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("includePending") Boolean includePending, @QueryParam("api-version") String apiVersion);

        @GET("deletedcertificates/{certificate-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedCertificateBundle>> getDeletedCertificate(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @DELETE("deletedcertificates/{certificate-name}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<RestVoidResponse> purgeDeletedCertificate(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("deletedcertificates/{certificate-name}/recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<CertificateBundle>> recoverDeletedCertificate(@PathParam("certificate-name") String certificateName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @GET("storage")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<StorageListResult>> getStorageAccounts(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("deletedstorage")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedStorageListResult>> getDeletedStorageAccounts(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("deletedstorage/{storage-account-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedStorageBundle>> getDeletedStorageAccount(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @DELETE("deletedstorage/{storage-account-name}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<RestVoidResponse> purgeDeletedStorageAccount(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("deletedstorage/{storage-account-name}/recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<StorageBundle>> recoverDeletedStorageAccount(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("storage/{storage-account-name}/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<BackupStorageResult>> backupStorageAccount(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("storage/restore")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<StorageBundle>> restoreStorageAccount(@HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") StorageRestoreParameters parameters);

        @DELETE("storage/{storage-account-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedStorageBundle>> deleteStorageAccount(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @GET("storage/{storage-account-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<StorageBundle>> getStorageAccount(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @PUT("storage/{storage-account-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<StorageBundle>> setStorageAccount(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") StorageAccountCreateParameters parameters);

        @PATCH("storage/{storage-account-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<StorageBundle>> updateStorageAccount(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") StorageAccountUpdateParameters parameters);

        @POST("storage/{storage-account-name}/regeneratekey")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<StorageBundle>> regenerateStorageAccountKey(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") StorageAccountRegenerteKeyParameters parameters);

        @GET("storage/{storage-account-name}/sas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SasDefinitionListResult>> getSasDefinitions(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("deletedstorage/{storage-account-name}/sas")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedSasDefinitionListResult>> getDeletedSasDefinitions(@PathParam("storage-account-name") String storageAccountName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("maxresults") Integer maxresults, @QueryParam("api-version") String apiVersion);

        @GET("deletedstorage/{storage-account-name}/sas/{sas-definition-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedSasDefinitionBundle>> getDeletedSasDefinition(@PathParam("storage-account-name") String storageAccountName, @PathParam("sas-definition-name") String sasDefinitionName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @POST("deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SasDefinitionBundle>> recoverDeletedSasDefinition(@PathParam("storage-account-name") String storageAccountName, @PathParam("sas-definition-name") String sasDefinitionName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @DELETE("storage/{storage-account-name}/sas/{sas-definition-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<DeletedSasDefinitionBundle>> deleteSasDefinition(@PathParam("storage-account-name") String storageAccountName, @PathParam("sas-definition-name") String sasDefinitionName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @GET("storage/{storage-account-name}/sas/{sas-definition-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SasDefinitionBundle>> getSasDefinition(@PathParam("storage-account-name") String storageAccountName, @PathParam("sas-definition-name") String sasDefinitionName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion);

        @PUT("storage/{storage-account-name}/sas/{sas-definition-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SasDefinitionBundle>> setSasDefinition(@PathParam("storage-account-name") String storageAccountName, @PathParam("sas-definition-name") String sasDefinitionName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") SasDefinitionCreateParameters parameters);

        @PATCH("storage/{storage-account-name}/sas/{sas-definition-name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(KeyVaultErrorException.class)
        Mono<SimpleRestResponse<SasDefinitionBundle>> updateSasDefinition(@PathParam("storage-account-name") String storageAccountName, @PathParam("sas-definition-name") String sasDefinitionName, @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") SasDefinitionUpdateParameters parameters);
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle createKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty) {
        return createKeyAsync(vaultBaseUrl, keyName, kty).block();
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> createKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (kty == null) {
            throw new IllegalArgumentException("Parameter kty is required and cannot be null.");
        }
        KeyCreateParameters parameters = new KeyCreateParameters();
        parameters.withKty(kty);
        parameters.withKeySize(null);
        parameters.withKeyOps(null);
        parameters.withKeyAttributes(null);
        parameters.withTags(null);
        parameters.withCurve(null);
        return service.createKey(keyName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> createKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty) {
        return createKeyWithRestResponseAsync(vaultBaseUrl, keyName, kty)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @param keySize The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * @param keyOps the List&lt;JsonWebKeyOperation&gt; value.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param curve Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle createKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags, JsonWebKeyCurveName curve) {
        return createKeyAsync(vaultBaseUrl, keyName, kty, keySize, keyOps, keyAttributes, tags, curve).block();
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @param keySize The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * @param keyOps the List&lt;JsonWebKeyOperation&gt; value.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param curve Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> createKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags, JsonWebKeyCurveName curve) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (kty == null) {
            throw new IllegalArgumentException("Parameter kty is required and cannot be null.");
        }
        Validator.validate(keyOps);
        Validator.validate(keyAttributes);
        Validator.validate(tags);
        KeyCreateParameters parameters = new KeyCreateParameters();
        parameters.withKty(kty);
        parameters.withKeySize(keySize);
        parameters.withKeyOps(keyOps);
        parameters.withKeyAttributes(keyAttributes);
        parameters.withTags(tags);
        parameters.withCurve(curve);
        return service.createKey(keyName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @param keySize The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * @param keyOps the List&lt;JsonWebKeyOperation&gt; value.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param curve Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> createKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags, JsonWebKeyCurveName curve) {
        return createKeyWithRestResponseAsync(vaultBaseUrl, keyName, kty, keySize, keyOps, keyAttributes, tags, curve)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle importKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key) {
        return importKeyAsync(vaultBaseUrl, keyName, key).block();
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> importKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (key == null) {
            throw new IllegalArgumentException("Parameter key is required and cannot be null.");
        }
        Validator.validate(key);
        KeyImportParameters parameters = new KeyImportParameters();
        parameters.withHsm(null);
        parameters.withKey(key);
        parameters.withKeyAttributes(null);
        parameters.withTags(null);
        return service.importKey(keyName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> importKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key) {
        return importKeyWithRestResponseAsync(vaultBaseUrl, keyName, key)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @param hsm Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle importKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags) {
        return importKeyAsync(vaultBaseUrl, keyName, key, hsm, keyAttributes, tags).block();
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @param hsm Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> importKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (key == null) {
            throw new IllegalArgumentException("Parameter key is required and cannot be null.");
        }
        Validator.validate(key);
        Validator.validate(keyAttributes);
        Validator.validate(tags);
        KeyImportParameters parameters = new KeyImportParameters();
        parameters.withHsm(hsm);
        parameters.withKey(key);
        parameters.withKeyAttributes(keyAttributes);
        parameters.withTags(tags);
        return service.importKey(keyName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @param hsm Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> importKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags) {
        return importKeyWithRestResponseAsync(vaultBaseUrl, keyName, key, hsm, keyAttributes, tags)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedKeyBundle object if successful.
     */
    public DeletedKeyBundle deleteKey(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return deleteKeyAsync(vaultBaseUrl, keyName).block();
    }

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedKeyBundle>> deleteKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteKey(keyName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedKeyBundle> deleteKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return deleteKeyWithRestResponseAsync(vaultBaseUrl, keyName)
            .flatMap((SimpleRestResponse<DeletedKeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle updateKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion) {
        return updateKeyAsync(vaultBaseUrl, keyName, keyVersion).block();
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> updateKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        KeyUpdateParameters parameters = new KeyUpdateParameters();
        parameters.withKeyOps(null);
        parameters.withKeyAttributes(null);
        parameters.withTags(null);
        return service.updateKey(keyName, keyVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> updateKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion) {
        return updateKeyWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @param keyOps Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle updateKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags) {
        return updateKeyAsync(vaultBaseUrl, keyName, keyVersion, keyOps, keyAttributes, tags).block();
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @param keyOps Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> updateKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(keyOps);
        Validator.validate(keyAttributes);
        Validator.validate(tags);
        KeyUpdateParameters parameters = new KeyUpdateParameters();
        parameters.withKeyOps(keyOps);
        parameters.withKeyAttributes(keyAttributes);
        parameters.withTags(tags);
        return service.updateKey(keyName, keyVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @param keyOps Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> updateKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags) {
        return updateKeyWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion, keyOps, keyAttributes, tags)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle getKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion) {
        return getKeyAsync(vaultBaseUrl, keyName, keyVersion).block();
    }

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> getKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getKey(keyName, keyVersion, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> getKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion) {
        return getKeyWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyListResult object if successful.
     */
    public KeyListResult getKeyVersions(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return getKeyVersionsAsync(vaultBaseUrl, keyName).block();
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyListResult>> getKeyVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getKeyVersions(keyName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyListResult> getKeyVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return getKeyVersionsWithRestResponseAsync(vaultBaseUrl, keyName)
            .flatMap((SimpleRestResponse<KeyListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyListResult object if successful.
     */
    public KeyListResult getKeyVersions(@NonNull String vaultBaseUrl, @NonNull String keyName, Integer maxresults) {
        return getKeyVersionsAsync(vaultBaseUrl, keyName, maxresults).block();
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyListResult>> getKeyVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getKeyVersions(keyName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyListResult> getKeyVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, Integer maxresults) {
        return getKeyVersionsWithRestResponseAsync(vaultBaseUrl, keyName, maxresults)
            .flatMap((SimpleRestResponse<KeyListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyListResult object if successful.
     */
    public KeyListResult getKeys(@NonNull String vaultBaseUrl) {
        return getKeysAsync(vaultBaseUrl).block();
    }

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyListResult>> getKeysWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getKeys(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyListResult> getKeysAsync(@NonNull String vaultBaseUrl) {
        return getKeysWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<KeyListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyListResult object if successful.
     */
    public KeyListResult getKeys(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getKeysAsync(vaultBaseUrl, maxresults).block();
    }

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyListResult>> getKeysWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getKeys(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyListResult> getKeysAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getKeysWithRestResponseAsync(vaultBaseUrl, maxresults)
            .flatMap((SimpleRestResponse<KeyListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupKeyResult object if successful.
     */
    public BackupKeyResult backupKey(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return backupKeyAsync(vaultBaseUrl, keyName).block();
    }

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<BackupKeyResult>> backupKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.backupKey(keyName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BackupKeyResult> backupKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return backupKeyWithRestResponseAsync(vaultBaseUrl, keyName)
            .flatMap((SimpleRestResponse<BackupKeyResult> res) -> Mono.just(res.body()));
    }

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle restoreKey(@NonNull String vaultBaseUrl, @NonNull byte[] keyBundleBackup) {
        return restoreKeyAsync(vaultBaseUrl, keyBundleBackup).block();
    }

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> restoreKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull byte[] keyBundleBackup) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (keyBundleBackup == null) {
            throw new IllegalArgumentException("Parameter keyBundleBackup is required and cannot be null.");
        }
        KeyRestoreParameters parameters = new KeyRestoreParameters();
        parameters.withKeyBundleBackup(keyBundleBackup);
        return service.restoreKey(vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> restoreKeyAsync(@NonNull String vaultBaseUrl, @NonNull byte[] keyBundleBackup) {
        return restoreKeyWithRestResponseAsync(vaultBaseUrl, keyBundleBackup)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    public KeyOperationResult encrypt(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        return encryptAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value).block();
    }

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyOperationResult>> encryptWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (algorithm == null) {
            throw new IllegalArgumentException("Parameter algorithm is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        KeyOperationsParameters parameters = new KeyOperationsParameters();
        parameters.withAlgorithm(algorithm);
        parameters.withValue(value);
        return service.encrypt(keyName, keyVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyOperationResult> encryptAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        return encryptWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value)
            .flatMap((SimpleRestResponse<KeyOperationResult> res) -> Mono.just(res.body()));
    }

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    public KeyOperationResult decrypt(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        return decryptAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value).block();
    }

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyOperationResult>> decryptWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (algorithm == null) {
            throw new IllegalArgumentException("Parameter algorithm is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        KeyOperationsParameters parameters = new KeyOperationsParameters();
        parameters.withAlgorithm(algorithm);
        parameters.withValue(value);
        return service.decrypt(keyName, keyVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyOperationResult> decryptAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        return decryptWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value)
            .flatMap((SimpleRestResponse<KeyOperationResult> res) -> Mono.just(res.body()));
    }

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    public KeyOperationResult sign(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] value) {
        return signAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value).block();
    }

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyOperationResult>> signWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] value) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (algorithm == null) {
            throw new IllegalArgumentException("Parameter algorithm is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        KeySignParameters parameters = new KeySignParameters();
        parameters.withAlgorithm(algorithm);
        parameters.withValue(value);
        return service.sign(keyName, keyVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyOperationResult> signAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] value) {
        return signWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value)
            .flatMap((SimpleRestResponse<KeyOperationResult> res) -> Mono.just(res.body()));
    }

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param digest The digest used for signing.
     * @param signature The signature to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyVerifyResult object if successful.
     */
    public KeyVerifyResult verify(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] digest, @NonNull byte[] signature) {
        return verifyAsync(vaultBaseUrl, keyName, keyVersion, algorithm, digest, signature).block();
    }

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param digest The digest used for signing.
     * @param signature The signature to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyVerifyResult>> verifyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] digest, @NonNull byte[] signature) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (algorithm == null) {
            throw new IllegalArgumentException("Parameter algorithm is required and cannot be null.");
        }
        if (digest == null) {
            throw new IllegalArgumentException("Parameter digest is required and cannot be null.");
        }
        if (signature == null) {
            throw new IllegalArgumentException("Parameter signature is required and cannot be null.");
        }
        KeyVerifyParameters parameters = new KeyVerifyParameters();
        parameters.withAlgorithm(algorithm);
        parameters.withDigest(digest);
        parameters.withSignature(signature);
        return service.verify(keyName, keyVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param digest The digest used for signing.
     * @param signature The signature to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyVerifyResult> verifyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] digest, @NonNull byte[] signature) {
        return verifyWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion, algorithm, digest, signature)
            .flatMap((SimpleRestResponse<KeyVerifyResult> res) -> Mono.just(res.body()));
    }

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    public KeyOperationResult wrapKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        return wrapKeyAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value).block();
    }

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyOperationResult>> wrapKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (algorithm == null) {
            throw new IllegalArgumentException("Parameter algorithm is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        KeyOperationsParameters parameters = new KeyOperationsParameters();
        parameters.withAlgorithm(algorithm);
        parameters.withValue(value);
        return service.wrapKey(keyName, keyVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyOperationResult> wrapKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        return wrapKeyWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value)
            .flatMap((SimpleRestResponse<KeyOperationResult> res) -> Mono.just(res.body()));
    }

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    public KeyOperationResult unwrapKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        return unwrapKeyAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value).block();
    }

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyOperationResult>> unwrapKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (keyVersion == null) {
            throw new IllegalArgumentException("Parameter keyVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (algorithm == null) {
            throw new IllegalArgumentException("Parameter algorithm is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        KeyOperationsParameters parameters = new KeyOperationsParameters();
        parameters.withAlgorithm(algorithm);
        parameters.withValue(value);
        return service.unwrapKey(keyName, keyVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyOperationResult> unwrapKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value) {
        return unwrapKeyWithRestResponseAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value)
            .flatMap((SimpleRestResponse<KeyOperationResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedKeyListResult object if successful.
     */
    public DeletedKeyListResult getDeletedKeys(@NonNull String vaultBaseUrl) {
        return getDeletedKeysAsync(vaultBaseUrl).block();
    }

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedKeyListResult>> getDeletedKeysWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getDeletedKeys(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedKeyListResult> getDeletedKeysAsync(@NonNull String vaultBaseUrl) {
        return getDeletedKeysWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<DeletedKeyListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedKeyListResult object if successful.
     */
    public DeletedKeyListResult getDeletedKeys(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getDeletedKeysAsync(vaultBaseUrl, maxresults).block();
    }

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedKeyListResult>> getDeletedKeysWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedKeys(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedKeyListResult> getDeletedKeysAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getDeletedKeysWithRestResponseAsync(vaultBaseUrl, maxresults)
            .flatMap((SimpleRestResponse<DeletedKeyListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedKeyBundle object if successful.
     */
    public DeletedKeyBundle getDeletedKey(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return getDeletedKeyAsync(vaultBaseUrl, keyName).block();
    }

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedKeyBundle>> getDeletedKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedKey(keyName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedKeyBundle> getDeletedKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return getDeletedKeyWithRestResponseAsync(vaultBaseUrl, keyName)
            .flatMap((SimpleRestResponse<DeletedKeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void purgeDeletedKey(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        purgeDeletedKeyAsync(vaultBaseUrl, keyName).block();
    }

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> purgeDeletedKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.purgeDeletedKey(keyName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> purgeDeletedKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return purgeDeletedKeyWithRestResponseAsync(vaultBaseUrl, keyName)
            .flatMap((RestVoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the deleted key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    public KeyBundle recoverDeletedKey(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return recoverDeletedKeyAsync(vaultBaseUrl, keyName).block();
    }

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the deleted key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<KeyBundle>> recoverDeletedKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.recoverDeletedKey(keyName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the deleted key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<KeyBundle> recoverDeletedKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName) {
        return recoverDeletedKeyWithRestResponseAsync(vaultBaseUrl, keyName)
            .flatMap((SimpleRestResponse<KeyBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    public SecretBundle setSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value) {
        return setSecretAsync(vaultBaseUrl, secretName, value).block();
    }

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretBundle>> setSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        SecretSetParameters parameters = new SecretSetParameters();
        parameters.withValue(value);
        parameters.withTags(null);
        parameters.withContentType(null);
        parameters.withSecretAttributes(null);
        return service.setSecret(secretName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretBundle> setSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value) {
        return setSecretWithRestResponseAsync(vaultBaseUrl, secretName, value)
            .flatMap((SimpleRestResponse<SecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    public SecretBundle setSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes) {
        return setSecretAsync(vaultBaseUrl, secretName, value, tags, contentType, secretAttributes).block();
    }

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretBundle>> setSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        Validator.validate(tags);
        Validator.validate(secretAttributes);
        SecretSetParameters parameters = new SecretSetParameters();
        parameters.withValue(value);
        parameters.withTags(tags);
        parameters.withContentType(contentType);
        parameters.withSecretAttributes(secretAttributes);
        return service.setSecret(secretName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretBundle> setSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes) {
        return setSecretWithRestResponseAsync(vaultBaseUrl, secretName, value, tags, contentType, secretAttributes)
            .flatMap((SimpleRestResponse<SecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSecretBundle object if successful.
     */
    public DeletedSecretBundle deleteSecret(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return deleteSecretAsync(vaultBaseUrl, secretName).block();
    }

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedSecretBundle>> deleteSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteSecret(secretName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedSecretBundle> deleteSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return deleteSecretWithRestResponseAsync(vaultBaseUrl, secretName)
            .flatMap((SimpleRestResponse<DeletedSecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    public SecretBundle updateSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion) {
        return updateSecretAsync(vaultBaseUrl, secretName, secretVersion).block();
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretBundle>> updateSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (secretVersion == null) {
            throw new IllegalArgumentException("Parameter secretVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        SecretUpdateParameters parameters = new SecretUpdateParameters();
        parameters.withContentType(null);
        parameters.withSecretAttributes(null);
        parameters.withTags(null);
        return service.updateSecret(secretName, secretVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretBundle> updateSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion) {
        return updateSecretWithRestResponseAsync(vaultBaseUrl, secretName, secretVersion)
            .flatMap((SimpleRestResponse<SecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    public SecretBundle updateSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags) {
        return updateSecretAsync(vaultBaseUrl, secretName, secretVersion, contentType, secretAttributes, tags).block();
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretBundle>> updateSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (secretVersion == null) {
            throw new IllegalArgumentException("Parameter secretVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(secretAttributes);
        Validator.validate(tags);
        SecretUpdateParameters parameters = new SecretUpdateParameters();
        parameters.withContentType(contentType);
        parameters.withSecretAttributes(secretAttributes);
        parameters.withTags(tags);
        return service.updateSecret(secretName, secretVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretBundle> updateSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags) {
        return updateSecretWithRestResponseAsync(vaultBaseUrl, secretName, secretVersion, contentType, secretAttributes, tags)
            .flatMap((SimpleRestResponse<SecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    public SecretBundle getSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion) {
        return getSecretAsync(vaultBaseUrl, secretName, secretVersion).block();
    }

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretBundle>> getSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (secretVersion == null) {
            throw new IllegalArgumentException("Parameter secretVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getSecret(secretName, secretVersion, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretBundle> getSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion) {
        return getSecretWithRestResponseAsync(vaultBaseUrl, secretName, secretVersion)
            .flatMap((SimpleRestResponse<SecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretListResult object if successful.
     */
    public SecretListResult getSecrets(@NonNull String vaultBaseUrl) {
        return getSecretsAsync(vaultBaseUrl).block();
    }

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretListResult>> getSecretsWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getSecrets(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretListResult> getSecretsAsync(@NonNull String vaultBaseUrl) {
        return getSecretsWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<SecretListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretListResult object if successful.
     */
    public SecretListResult getSecrets(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getSecretsAsync(vaultBaseUrl, maxresults).block();
    }

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretListResult>> getSecretsWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getSecrets(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretListResult> getSecretsAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getSecretsWithRestResponseAsync(vaultBaseUrl, maxresults)
            .flatMap((SimpleRestResponse<SecretListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretListResult object if successful.
     */
    public SecretListResult getSecretVersions(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return getSecretVersionsAsync(vaultBaseUrl, secretName).block();
    }

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretListResult>> getSecretVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getSecretVersions(secretName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretListResult> getSecretVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return getSecretVersionsWithRestResponseAsync(vaultBaseUrl, secretName)
            .flatMap((SimpleRestResponse<SecretListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretListResult object if successful.
     */
    public SecretListResult getSecretVersions(@NonNull String vaultBaseUrl, @NonNull String secretName, Integer maxresults) {
        return getSecretVersionsAsync(vaultBaseUrl, secretName, maxresults).block();
    }

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretListResult>> getSecretVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getSecretVersions(secretName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretListResult> getSecretVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, Integer maxresults) {
        return getSecretVersionsWithRestResponseAsync(vaultBaseUrl, secretName, maxresults)
            .flatMap((SimpleRestResponse<SecretListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSecretListResult object if successful.
     */
    public DeletedSecretListResult getDeletedSecrets(@NonNull String vaultBaseUrl) {
        return getDeletedSecretsAsync(vaultBaseUrl).block();
    }

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedSecretListResult>> getDeletedSecretsWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getDeletedSecrets(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedSecretListResult> getDeletedSecretsAsync(@NonNull String vaultBaseUrl) {
        return getDeletedSecretsWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<DeletedSecretListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSecretListResult object if successful.
     */
    public DeletedSecretListResult getDeletedSecrets(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getDeletedSecretsAsync(vaultBaseUrl, maxresults).block();
    }

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedSecretListResult>> getDeletedSecretsWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedSecrets(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedSecretListResult> getDeletedSecretsAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getDeletedSecretsWithRestResponseAsync(vaultBaseUrl, maxresults)
            .flatMap((SimpleRestResponse<DeletedSecretListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSecretBundle object if successful.
     */
    public DeletedSecretBundle getDeletedSecret(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return getDeletedSecretAsync(vaultBaseUrl, secretName).block();
    }

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedSecretBundle>> getDeletedSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedSecret(secretName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedSecretBundle> getDeletedSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return getDeletedSecretWithRestResponseAsync(vaultBaseUrl, secretName)
            .flatMap((SimpleRestResponse<DeletedSecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void purgeDeletedSecret(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        purgeDeletedSecretAsync(vaultBaseUrl, secretName).block();
    }

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> purgeDeletedSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.purgeDeletedSecret(secretName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> purgeDeletedSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return purgeDeletedSecretWithRestResponseAsync(vaultBaseUrl, secretName)
            .flatMap((RestVoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the deleted secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    public SecretBundle recoverDeletedSecret(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return recoverDeletedSecretAsync(vaultBaseUrl, secretName).block();
    }

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the deleted secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretBundle>> recoverDeletedSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.recoverDeletedSecret(secretName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the deleted secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretBundle> recoverDeletedSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return recoverDeletedSecretWithRestResponseAsync(vaultBaseUrl, secretName)
            .flatMap((SimpleRestResponse<SecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupSecretResult object if successful.
     */
    public BackupSecretResult backupSecret(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return backupSecretAsync(vaultBaseUrl, secretName).block();
    }

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<BackupSecretResult>> backupSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.backupSecret(secretName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BackupSecretResult> backupSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName) {
        return backupSecretWithRestResponseAsync(vaultBaseUrl, secretName)
            .flatMap((SimpleRestResponse<BackupSecretResult> res) -> Mono.just(res.body()));
    }

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretBundleBackup The backup blob associated with a secret bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    public SecretBundle restoreSecret(@NonNull String vaultBaseUrl, @NonNull byte[] secretBundleBackup) {
        return restoreSecretAsync(vaultBaseUrl, secretBundleBackup).block();
    }

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretBundleBackup The backup blob associated with a secret bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SecretBundle>> restoreSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull byte[] secretBundleBackup) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (secretBundleBackup == null) {
            throw new IllegalArgumentException("Parameter secretBundleBackup is required and cannot be null.");
        }
        SecretRestoreParameters parameters = new SecretRestoreParameters();
        parameters.withSecretBundleBackup(secretBundleBackup);
        return service.restoreSecret(vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretBundleBackup The backup blob associated with a secret bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SecretBundle> restoreSecretAsync(@NonNull String vaultBaseUrl, @NonNull byte[] secretBundleBackup) {
        return restoreSecretWithRestResponseAsync(vaultBaseUrl, secretBundleBackup)
            .flatMap((SimpleRestResponse<SecretBundle> res) -> Mono.just(res.body()));
    }

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateListResult object if successful.
     */
    public CertificateListResult getCertificates(@NonNull String vaultBaseUrl) {
        return getCertificatesAsync(vaultBaseUrl).block();
    }

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateListResult>> getCertificatesWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        final Boolean includePending = null;
        return service.getCertificates(vaultBaseUrl, maxresults, includePending, this.apiVersion());
    }

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateListResult> getCertificatesAsync(@NonNull String vaultBaseUrl) {
        return getCertificatesWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<CertificateListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateListResult object if successful.
     */
    public CertificateListResult getCertificates(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending) {
        return getCertificatesAsync(vaultBaseUrl, maxresults, includePending).block();
    }

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateListResult>> getCertificatesWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getCertificates(vaultBaseUrl, maxresults, includePending, this.apiVersion());
    }

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateListResult> getCertificatesAsync(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending) {
        return getCertificatesWithRestResponseAsync(vaultBaseUrl, maxresults, includePending)
            .flatMap((SimpleRestResponse<CertificateListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedCertificateBundle object if successful.
     */
    public DeletedCertificateBundle deleteCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return deleteCertificateAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedCertificateBundle>> deleteCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteCertificate(certificateName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedCertificateBundle> deleteCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return deleteCertificateWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<DeletedCertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts The contacts for the key vault certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Contacts object if successful.
     */
    public Contacts setCertificateContacts(@NonNull String vaultBaseUrl, @NonNull Contacts contacts) {
        return setCertificateContactsAsync(vaultBaseUrl, contacts).block();
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts The contacts for the key vault certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<Contacts>> setCertificateContactsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull Contacts contacts) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (contacts == null) {
            throw new IllegalArgumentException("Parameter contacts is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(contacts);
        return service.setCertificateContacts(vaultBaseUrl, contacts, this.apiVersion());
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts The contacts for the key vault certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Contacts> setCertificateContactsAsync(@NonNull String vaultBaseUrl, @NonNull Contacts contacts) {
        return setCertificateContactsWithRestResponseAsync(vaultBaseUrl, contacts)
            .flatMap((SimpleRestResponse<Contacts> res) -> Mono.just(res.body()));
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Contacts object if successful.
     */
    public Contacts getCertificateContacts(@NonNull String vaultBaseUrl) {
        return getCertificateContactsAsync(vaultBaseUrl).block();
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<Contacts>> getCertificateContactsWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getCertificateContacts(vaultBaseUrl, this.apiVersion());
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Contacts> getCertificateContactsAsync(@NonNull String vaultBaseUrl) {
        return getCertificateContactsWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<Contacts> res) -> Mono.just(res.body()));
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Contacts object if successful.
     */
    public Contacts deleteCertificateContacts(@NonNull String vaultBaseUrl) {
        return deleteCertificateContactsAsync(vaultBaseUrl).block();
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<Contacts>> deleteCertificateContactsWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteCertificateContacts(vaultBaseUrl, this.apiVersion());
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Contacts> deleteCertificateContactsAsync(@NonNull String vaultBaseUrl) {
        return deleteCertificateContactsWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<Contacts> res) -> Mono.just(res.body()));
    }

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateIssuerListResult object if successful.
     */
    public CertificateIssuerListResult getCertificateIssuers(@NonNull String vaultBaseUrl) {
        return getCertificateIssuersAsync(vaultBaseUrl).block();
    }

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateIssuerListResult>> getCertificateIssuersWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getCertificateIssuers(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateIssuerListResult> getCertificateIssuersAsync(@NonNull String vaultBaseUrl) {
        return getCertificateIssuersWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<CertificateIssuerListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateIssuerListResult object if successful.
     */
    public CertificateIssuerListResult getCertificateIssuers(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getCertificateIssuersAsync(vaultBaseUrl, maxresults).block();
    }

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateIssuerListResult>> getCertificateIssuersWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getCertificateIssuers(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateIssuerListResult> getCertificateIssuersAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getCertificateIssuersWithRestResponseAsync(vaultBaseUrl, maxresults)
            .flatMap((SimpleRestResponse<CertificateIssuerListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    public IssuerBundle setCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider) {
        return setCertificateIssuerAsync(vaultBaseUrl, issuerName, provider).block();
    }

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<IssuerBundle>> setCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (issuerName == null) {
            throw new IllegalArgumentException("Parameter issuerName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (provider == null) {
            throw new IllegalArgumentException("Parameter provider is required and cannot be null.");
        }
        CertificateIssuerSetParameters parameter = new CertificateIssuerSetParameters();
        parameter.withProvider(provider);
        parameter.withCredentials(null);
        parameter.withOrganizationDetails(null);
        parameter.withAttributes(null);
        return service.setCertificateIssuer(issuerName, vaultBaseUrl, this.apiVersion(), parameter);
    }

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<IssuerBundle> setCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider) {
        return setCertificateIssuerWithRestResponseAsync(vaultBaseUrl, issuerName, provider)
            .flatMap((SimpleRestResponse<IssuerBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    public IssuerBundle setCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes) {
        return setCertificateIssuerAsync(vaultBaseUrl, issuerName, provider, credentials, organizationDetails, attributes).block();
    }

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<IssuerBundle>> setCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (issuerName == null) {
            throw new IllegalArgumentException("Parameter issuerName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (provider == null) {
            throw new IllegalArgumentException("Parameter provider is required and cannot be null.");
        }
        Validator.validate(credentials);
        Validator.validate(organizationDetails);
        Validator.validate(attributes);
        CertificateIssuerSetParameters parameter = new CertificateIssuerSetParameters();
        parameter.withProvider(provider);
        parameter.withCredentials(credentials);
        parameter.withOrganizationDetails(organizationDetails);
        parameter.withAttributes(attributes);
        return service.setCertificateIssuer(issuerName, vaultBaseUrl, this.apiVersion(), parameter);
    }

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<IssuerBundle> setCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes) {
        return setCertificateIssuerWithRestResponseAsync(vaultBaseUrl, issuerName, provider, credentials, organizationDetails, attributes)
            .flatMap((SimpleRestResponse<IssuerBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    public IssuerBundle updateCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        return updateCertificateIssuerAsync(vaultBaseUrl, issuerName).block();
    }

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<IssuerBundle>> updateCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (issuerName == null) {
            throw new IllegalArgumentException("Parameter issuerName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        CertificateIssuerUpdateParameters parameter = new CertificateIssuerUpdateParameters();
        parameter.withProvider(null);
        parameter.withCredentials(null);
        parameter.withOrganizationDetails(null);
        parameter.withAttributes(null);
        return service.updateCertificateIssuer(issuerName, vaultBaseUrl, this.apiVersion(), parameter);
    }

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<IssuerBundle> updateCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        return updateCertificateIssuerWithRestResponseAsync(vaultBaseUrl, issuerName)
            .flatMap((SimpleRestResponse<IssuerBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    public IssuerBundle updateCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes) {
        return updateCertificateIssuerAsync(vaultBaseUrl, issuerName, provider, credentials, organizationDetails, attributes).block();
    }

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<IssuerBundle>> updateCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (issuerName == null) {
            throw new IllegalArgumentException("Parameter issuerName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(credentials);
        Validator.validate(organizationDetails);
        Validator.validate(attributes);
        CertificateIssuerUpdateParameters parameter = new CertificateIssuerUpdateParameters();
        parameter.withProvider(provider);
        parameter.withCredentials(credentials);
        parameter.withOrganizationDetails(organizationDetails);
        parameter.withAttributes(attributes);
        return service.updateCertificateIssuer(issuerName, vaultBaseUrl, this.apiVersion(), parameter);
    }

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<IssuerBundle> updateCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes) {
        return updateCertificateIssuerWithRestResponseAsync(vaultBaseUrl, issuerName, provider, credentials, organizationDetails, attributes)
            .flatMap((SimpleRestResponse<IssuerBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    public IssuerBundle getCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        return getCertificateIssuerAsync(vaultBaseUrl, issuerName).block();
    }

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<IssuerBundle>> getCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (issuerName == null) {
            throw new IllegalArgumentException("Parameter issuerName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getCertificateIssuer(issuerName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<IssuerBundle> getCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        return getCertificateIssuerWithRestResponseAsync(vaultBaseUrl, issuerName)
            .flatMap((SimpleRestResponse<IssuerBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    public IssuerBundle deleteCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        return deleteCertificateIssuerAsync(vaultBaseUrl, issuerName).block();
    }

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<IssuerBundle>> deleteCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (issuerName == null) {
            throw new IllegalArgumentException("Parameter issuerName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteCertificateIssuer(issuerName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<IssuerBundle> deleteCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName) {
        return deleteCertificateIssuerWithRestResponseAsync(vaultBaseUrl, issuerName)
            .flatMap((SimpleRestResponse<IssuerBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    public CertificateOperation createCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return createCertificateAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateOperation>> createCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        CertificateCreateParameters parameters = new CertificateCreateParameters();
        parameters.withCertificatePolicy(null);
        parameters.withCertificateAttributes(null);
        parameters.withTags(null);
        return service.createCertificate(certificateName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateOperation> createCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return createCertificateWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<CertificateOperation> res) -> Mono.just(res.body()));
    }

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    public CertificateOperation createCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        return createCertificateAsync(vaultBaseUrl, certificateName, certificatePolicy, certificateAttributes, tags).block();
    }

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateOperation>> createCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(certificatePolicy);
        Validator.validate(certificateAttributes);
        Validator.validate(tags);
        CertificateCreateParameters parameters = new CertificateCreateParameters();
        parameters.withCertificatePolicy(certificatePolicy);
        parameters.withCertificateAttributes(certificateAttributes);
        parameters.withTags(tags);
        return service.createCertificate(certificateName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateOperation> createCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        return createCertificateWithRestResponseAsync(vaultBaseUrl, certificateName, certificatePolicy, certificateAttributes, tags)
            .flatMap((SimpleRestResponse<CertificateOperation> res) -> Mono.just(res.body()));
    }

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle importCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate) {
        return importCertificateAsync(vaultBaseUrl, certificateName, base64EncodedCertificate).block();
    }

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> importCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (base64EncodedCertificate == null) {
            throw new IllegalArgumentException("Parameter base64EncodedCertificate is required and cannot be null.");
        }
        CertificateImportParameters parameters = new CertificateImportParameters();
        parameters.withBase64EncodedCertificate(base64EncodedCertificate);
        parameters.withPassword(null);
        parameters.withCertificatePolicy(null);
        parameters.withCertificateAttributes(null);
        parameters.withTags(null);
        return service.importCertificate(certificateName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> importCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate) {
        return importCertificateWithRestResponseAsync(vaultBaseUrl, certificateName, base64EncodedCertificate)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle importCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        return importCertificateAsync(vaultBaseUrl, certificateName, base64EncodedCertificate, password, certificatePolicy, certificateAttributes, tags).block();
    }

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> importCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (base64EncodedCertificate == null) {
            throw new IllegalArgumentException("Parameter base64EncodedCertificate is required and cannot be null.");
        }
        Validator.validate(certificatePolicy);
        Validator.validate(certificateAttributes);
        Validator.validate(tags);
        CertificateImportParameters parameters = new CertificateImportParameters();
        parameters.withBase64EncodedCertificate(base64EncodedCertificate);
        parameters.withPassword(password);
        parameters.withCertificatePolicy(certificatePolicy);
        parameters.withCertificateAttributes(certificateAttributes);
        parameters.withTags(tags);
        return service.importCertificate(certificateName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> importCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        return importCertificateWithRestResponseAsync(vaultBaseUrl, certificateName, base64EncodedCertificate, password, certificatePolicy, certificateAttributes, tags)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateListResult object if successful.
     */
    public CertificateListResult getCertificateVersions(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return getCertificateVersionsAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateListResult>> getCertificateVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getCertificateVersions(certificateName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateListResult> getCertificateVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return getCertificateVersionsWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<CertificateListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateListResult object if successful.
     */
    public CertificateListResult getCertificateVersions(@NonNull String vaultBaseUrl, @NonNull String certificateName, Integer maxresults) {
        return getCertificateVersionsAsync(vaultBaseUrl, certificateName, maxresults).block();
    }

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateListResult>> getCertificateVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getCertificateVersions(certificateName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateListResult> getCertificateVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, Integer maxresults) {
        return getCertificateVersionsWithRestResponseAsync(vaultBaseUrl, certificateName, maxresults)
            .flatMap((SimpleRestResponse<CertificateListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificatePolicy object if successful.
     */
    public CertificatePolicy getCertificatePolicy(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return getCertificatePolicyAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificatePolicy>> getCertificatePolicyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getCertificatePolicy(certificateName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificatePolicy> getCertificatePolicyAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return getCertificatePolicyWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<CertificatePolicy> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificatePolicy object if successful.
     */
    public CertificatePolicy updateCertificatePolicy(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull CertificatePolicy certificatePolicy) {
        return updateCertificatePolicyAsync(vaultBaseUrl, certificateName, certificatePolicy).block();
    }

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificatePolicy>> updateCertificatePolicyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull CertificatePolicy certificatePolicy) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (certificatePolicy == null) {
            throw new IllegalArgumentException("Parameter certificatePolicy is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(certificatePolicy);
        return service.updateCertificatePolicy(certificateName, vaultBaseUrl, certificatePolicy, this.apiVersion());
    }

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificatePolicy> updateCertificatePolicyAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull CertificatePolicy certificatePolicy) {
        return updateCertificatePolicyWithRestResponseAsync(vaultBaseUrl, certificateName, certificatePolicy)
            .flatMap((SimpleRestResponse<CertificatePolicy> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle updateCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion) {
        return updateCertificateAsync(vaultBaseUrl, certificateName, certificateVersion).block();
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> updateCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (certificateVersion == null) {
            throw new IllegalArgumentException("Parameter certificateVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        CertificateUpdateParameters parameters = new CertificateUpdateParameters();
        parameters.withCertificatePolicy(null);
        parameters.withCertificateAttributes(null);
        parameters.withTags(null);
        return service.updateCertificate(certificateName, certificateVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> updateCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion) {
        return updateCertificateWithRestResponseAsync(vaultBaseUrl, certificateName, certificateVersion)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle updateCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        return updateCertificateAsync(vaultBaseUrl, certificateName, certificateVersion, certificatePolicy, certificateAttributes, tags).block();
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> updateCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (certificateVersion == null) {
            throw new IllegalArgumentException("Parameter certificateVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(certificatePolicy);
        Validator.validate(certificateAttributes);
        Validator.validate(tags);
        CertificateUpdateParameters parameters = new CertificateUpdateParameters();
        parameters.withCertificatePolicy(certificatePolicy);
        parameters.withCertificateAttributes(certificateAttributes);
        parameters.withTags(tags);
        return service.updateCertificate(certificateName, certificateVersion, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> updateCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        return updateCertificateWithRestResponseAsync(vaultBaseUrl, certificateName, certificateVersion, certificatePolicy, certificateAttributes, tags)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle getCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion) {
        return getCertificateAsync(vaultBaseUrl, certificateName, certificateVersion).block();
    }

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> getCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (certificateVersion == null) {
            throw new IllegalArgumentException("Parameter certificateVersion is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getCertificate(certificateName, certificateVersion, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> getCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion) {
        return getCertificateWithRestResponseAsync(vaultBaseUrl, certificateName, certificateVersion)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    public CertificateOperation updateCertificateOperation(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull boolean cancellationRequested) {
        return updateCertificateOperationAsync(vaultBaseUrl, certificateName, cancellationRequested).block();
    }

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateOperation>> updateCertificateOperationWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull boolean cancellationRequested) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        CertificateOperationUpdateParameter certificateOperation = new CertificateOperationUpdateParameter();
        certificateOperation.withCancellationRequested(cancellationRequested);
        return service.updateCertificateOperation(certificateName, vaultBaseUrl, this.apiVersion(), certificateOperation);
    }

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateOperation> updateCertificateOperationAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull boolean cancellationRequested) {
        return updateCertificateOperationWithRestResponseAsync(vaultBaseUrl, certificateName, cancellationRequested)
            .flatMap((SimpleRestResponse<CertificateOperation> res) -> Mono.just(res.body()));
    }

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    public CertificateOperation getCertificateOperation(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return getCertificateOperationAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateOperation>> getCertificateOperationWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getCertificateOperation(certificateName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateOperation> getCertificateOperationAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return getCertificateOperationWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<CertificateOperation> res) -> Mono.just(res.body()));
    }

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    public CertificateOperation deleteCertificateOperation(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return deleteCertificateOperationAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateOperation>> deleteCertificateOperationWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteCertificateOperation(certificateName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateOperation> deleteCertificateOperationAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return deleteCertificateOperationWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<CertificateOperation> res) -> Mono.just(res.body()));
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle mergeCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates) {
        return mergeCertificateAsync(vaultBaseUrl, certificateName, x509Certificates).block();
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> mergeCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (x509Certificates == null) {
            throw new IllegalArgumentException("Parameter x509Certificates is required and cannot be null.");
        }
        Validator.validate(x509Certificates);
        CertificateMergeParameters parameters = new CertificateMergeParameters();
        parameters.withX509Certificates(x509Certificates);
        parameters.withCertificateAttributes(null);
        parameters.withTags(null);
        return service.mergeCertificate(certificateName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> mergeCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates) {
        return mergeCertificateWithRestResponseAsync(vaultBaseUrl, certificateName, x509Certificates)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle mergeCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        return mergeCertificateAsync(vaultBaseUrl, certificateName, x509Certificates, certificateAttributes, tags).block();
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> mergeCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (x509Certificates == null) {
            throw new IllegalArgumentException("Parameter x509Certificates is required and cannot be null.");
        }
        Validator.validate(x509Certificates);
        Validator.validate(certificateAttributes);
        Validator.validate(tags);
        CertificateMergeParameters parameters = new CertificateMergeParameters();
        parameters.withX509Certificates(x509Certificates);
        parameters.withCertificateAttributes(certificateAttributes);
        parameters.withTags(tags);
        return service.mergeCertificate(certificateName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> mergeCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags) {
        return mergeCertificateWithRestResponseAsync(vaultBaseUrl, certificateName, x509Certificates, certificateAttributes, tags)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Backs up the specified certificate.
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupCertificateResult object if successful.
     */
    public BackupCertificateResult backupCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return backupCertificateAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Backs up the specified certificate.
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<BackupCertificateResult>> backupCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.backupCertificate(certificateName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Backs up the specified certificate.
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BackupCertificateResult> backupCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return backupCertificateWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<BackupCertificateResult> res) -> Mono.just(res.body()));
    }

    /**
     * Restores a backed up certificate to a vault.
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateBundleBackup The backup blob associated with a certificate bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle restoreCertificate(@NonNull String vaultBaseUrl, @NonNull byte[] certificateBundleBackup) {
        return restoreCertificateAsync(vaultBaseUrl, certificateBundleBackup).block();
    }

    /**
     * Restores a backed up certificate to a vault.
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateBundleBackup The backup blob associated with a certificate bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> restoreCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull byte[] certificateBundleBackup) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (certificateBundleBackup == null) {
            throw new IllegalArgumentException("Parameter certificateBundleBackup is required and cannot be null.");
        }
        CertificateRestoreParameters parameters = new CertificateRestoreParameters();
        parameters.withCertificateBundleBackup(certificateBundleBackup);
        return service.restoreCertificate(vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Restores a backed up certificate to a vault.
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateBundleBackup The backup blob associated with a certificate bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> restoreCertificateAsync(@NonNull String vaultBaseUrl, @NonNull byte[] certificateBundleBackup) {
        return restoreCertificateWithRestResponseAsync(vaultBaseUrl, certificateBundleBackup)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedCertificateListResult object if successful.
     */
    public DeletedCertificateListResult getDeletedCertificates(@NonNull String vaultBaseUrl) {
        return getDeletedCertificatesAsync(vaultBaseUrl).block();
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedCertificateListResult>> getDeletedCertificatesWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        final Boolean includePending = null;
        return service.getDeletedCertificates(vaultBaseUrl, maxresults, includePending, this.apiVersion());
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedCertificateListResult> getDeletedCertificatesAsync(@NonNull String vaultBaseUrl) {
        return getDeletedCertificatesWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<DeletedCertificateListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedCertificateListResult object if successful.
     */
    public DeletedCertificateListResult getDeletedCertificates(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending) {
        return getDeletedCertificatesAsync(vaultBaseUrl, maxresults, includePending).block();
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedCertificateListResult>> getDeletedCertificatesWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedCertificates(vaultBaseUrl, maxresults, includePending, this.apiVersion());
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedCertificateListResult> getDeletedCertificatesAsync(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending) {
        return getDeletedCertificatesWithRestResponseAsync(vaultBaseUrl, maxresults, includePending)
            .flatMap((SimpleRestResponse<DeletedCertificateListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Retrieves information about the specified deleted certificate.
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedCertificateBundle object if successful.
     */
    public DeletedCertificateBundle getDeletedCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return getDeletedCertificateAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Retrieves information about the specified deleted certificate.
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedCertificateBundle>> getDeletedCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedCertificate(certificateName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Retrieves information about the specified deleted certificate.
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedCertificateBundle> getDeletedCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return getDeletedCertificateWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<DeletedCertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Permanently deletes the specified deleted certificate.
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void purgeDeletedCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        purgeDeletedCertificateAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Permanently deletes the specified deleted certificate.
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> purgeDeletedCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.purgeDeletedCertificate(certificateName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Permanently deletes the specified deleted certificate.
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> purgeDeletedCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return purgeDeletedCertificateWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((RestVoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the deleted certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    public CertificateBundle recoverDeletedCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return recoverDeletedCertificateAsync(vaultBaseUrl, certificateName).block();
    }

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the deleted certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<CertificateBundle>> recoverDeletedCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.recoverDeletedCertificate(certificateName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the deleted certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<CertificateBundle> recoverDeletedCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName) {
        return recoverDeletedCertificateWithRestResponseAsync(vaultBaseUrl, certificateName)
            .flatMap((SimpleRestResponse<CertificateBundle> res) -> Mono.just(res.body()));
    }

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageListResult object if successful.
     */
    public StorageListResult getStorageAccounts(@NonNull String vaultBaseUrl) {
        return getStorageAccountsAsync(vaultBaseUrl).block();
    }

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageListResult>> getStorageAccountsWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getStorageAccounts(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageListResult> getStorageAccountsAsync(@NonNull String vaultBaseUrl) {
        return getStorageAccountsWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<StorageListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageListResult object if successful.
     */
    public StorageListResult getStorageAccounts(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getStorageAccountsAsync(vaultBaseUrl, maxresults).block();
    }

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageListResult>> getStorageAccountsWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getStorageAccounts(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageListResult> getStorageAccountsAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getStorageAccountsWithRestResponseAsync(vaultBaseUrl, maxresults)
            .flatMap((SimpleRestResponse<StorageListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedStorageListResult object if successful.
     */
    public DeletedStorageListResult getDeletedStorageAccounts(@NonNull String vaultBaseUrl) {
        return getDeletedStorageAccountsAsync(vaultBaseUrl).block();
    }

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedStorageListResult>> getDeletedStorageAccountsWithRestResponseAsync(@NonNull String vaultBaseUrl) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getDeletedStorageAccounts(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedStorageListResult> getDeletedStorageAccountsAsync(@NonNull String vaultBaseUrl) {
        return getDeletedStorageAccountsWithRestResponseAsync(vaultBaseUrl)
            .flatMap((SimpleRestResponse<DeletedStorageListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedStorageListResult object if successful.
     */
    public DeletedStorageListResult getDeletedStorageAccounts(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getDeletedStorageAccountsAsync(vaultBaseUrl, maxresults).block();
    }

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedStorageListResult>> getDeletedStorageAccountsWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedStorageAccounts(vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedStorageListResult> getDeletedStorageAccountsAsync(@NonNull String vaultBaseUrl, Integer maxresults) {
        return getDeletedStorageAccountsWithRestResponseAsync(vaultBaseUrl, maxresults)
            .flatMap((SimpleRestResponse<DeletedStorageListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedStorageBundle object if successful.
     */
    public DeletedStorageBundle getDeletedStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return getDeletedStorageAccountAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedStorageBundle>> getDeletedStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedStorageBundle> getDeletedStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return getDeletedStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((SimpleRestResponse<DeletedStorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void purgeDeletedStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        purgeDeletedStorageAccountAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<RestVoidResponse> purgeDeletedStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.purgeDeletedStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> purgeDeletedStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return purgeDeletedStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((RestVoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    public StorageBundle recoverDeletedStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return recoverDeletedStorageAccountAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageBundle>> recoverDeletedStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.recoverDeletedStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageBundle> recoverDeletedStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return recoverDeletedStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((SimpleRestResponse<StorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupStorageResult object if successful.
     */
    public BackupStorageResult backupStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return backupStorageAccountAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<BackupStorageResult>> backupStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.backupStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BackupStorageResult> backupStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return backupStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((SimpleRestResponse<BackupStorageResult> res) -> Mono.just(res.body()));
    }

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageBundleBackup The backup blob associated with a storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    public StorageBundle restoreStorageAccount(@NonNull String vaultBaseUrl, @NonNull byte[] storageBundleBackup) {
        return restoreStorageAccountAsync(vaultBaseUrl, storageBundleBackup).block();
    }

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageBundleBackup The backup blob associated with a storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageBundle>> restoreStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull byte[] storageBundleBackup) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (storageBundleBackup == null) {
            throw new IllegalArgumentException("Parameter storageBundleBackup is required and cannot be null.");
        }
        StorageRestoreParameters parameters = new StorageRestoreParameters();
        parameters.withStorageBundleBackup(storageBundleBackup);
        return service.restoreStorageAccount(vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageBundleBackup The backup blob associated with a storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageBundle> restoreStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull byte[] storageBundleBackup) {
        return restoreStorageAccountWithRestResponseAsync(vaultBaseUrl, storageBundleBackup)
            .flatMap((SimpleRestResponse<StorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Deletes a storage account. This operation requires the storage/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedStorageBundle object if successful.
     */
    public DeletedStorageBundle deleteStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return deleteStorageAccountAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * Deletes a storage account. This operation requires the storage/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedStorageBundle>> deleteStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Deletes a storage account. This operation requires the storage/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedStorageBundle> deleteStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return deleteStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((SimpleRestResponse<DeletedStorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    public StorageBundle getStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return getStorageAccountAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageBundle>> getStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageBundle> getStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return getStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((SimpleRestResponse<StorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    public StorageBundle setStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey) {
        return setStorageAccountAsync(vaultBaseUrl, storageAccountName, resourceId, activeKeyName, autoRegenerateKey).block();
    }

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageBundle>> setStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (activeKeyName == null) {
            throw new IllegalArgumentException("Parameter activeKeyName is required and cannot be null.");
        }
        StorageAccountCreateParameters parameters = new StorageAccountCreateParameters();
        parameters.withResourceId(resourceId);
        parameters.withActiveKeyName(activeKeyName);
        parameters.withAutoRegenerateKey(autoRegenerateKey);
        parameters.withRegenerationPeriod(null);
        parameters.withStorageAccountAttributes(null);
        parameters.withTags(null);
        return service.setStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageBundle> setStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey) {
        return setStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName, resourceId, activeKeyName, autoRegenerateKey)
            .flatMap((SimpleRestResponse<StorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    public StorageBundle setStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags) {
        return setStorageAccountAsync(vaultBaseUrl, storageAccountName, resourceId, activeKeyName, autoRegenerateKey, regenerationPeriod, storageAccountAttributes, tags).block();
    }

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageBundle>> setStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (activeKeyName == null) {
            throw new IllegalArgumentException("Parameter activeKeyName is required and cannot be null.");
        }
        Validator.validate(storageAccountAttributes);
        Validator.validate(tags);
        StorageAccountCreateParameters parameters = new StorageAccountCreateParameters();
        parameters.withResourceId(resourceId);
        parameters.withActiveKeyName(activeKeyName);
        parameters.withAutoRegenerateKey(autoRegenerateKey);
        parameters.withRegenerationPeriod(regenerationPeriod);
        parameters.withStorageAccountAttributes(storageAccountAttributes);
        parameters.withTags(tags);
        return service.setStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageBundle> setStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags) {
        return setStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName, resourceId, activeKeyName, autoRegenerateKey, regenerationPeriod, storageAccountAttributes, tags)
            .flatMap((SimpleRestResponse<StorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    public StorageBundle updateStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return updateStorageAccountAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageBundle>> updateStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        StorageAccountUpdateParameters parameters = new StorageAccountUpdateParameters();
        parameters.withActiveKeyName(null);
        parameters.withAutoRegenerateKey(null);
        parameters.withRegenerationPeriod(null);
        parameters.withStorageAccountAttributes(null);
        parameters.withTags(null);
        return service.updateStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageBundle> updateStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return updateStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((SimpleRestResponse<StorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param activeKeyName The current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    public StorageBundle updateStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, String activeKeyName, Boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags) {
        return updateStorageAccountAsync(vaultBaseUrl, storageAccountName, activeKeyName, autoRegenerateKey, regenerationPeriod, storageAccountAttributes, tags).block();
    }

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param activeKeyName The current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageBundle>> updateStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, String activeKeyName, Boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(storageAccountAttributes);
        Validator.validate(tags);
        StorageAccountUpdateParameters parameters = new StorageAccountUpdateParameters();
        parameters.withActiveKeyName(activeKeyName);
        parameters.withAutoRegenerateKey(autoRegenerateKey);
        parameters.withRegenerationPeriod(regenerationPeriod);
        parameters.withStorageAccountAttributes(storageAccountAttributes);
        parameters.withTags(tags);
        return service.updateStorageAccount(storageAccountName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param activeKeyName The current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageBundle> updateStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, String activeKeyName, Boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags) {
        return updateStorageAccountWithRestResponseAsync(vaultBaseUrl, storageAccountName, activeKeyName, autoRegenerateKey, regenerationPeriod, storageAccountAttributes, tags)
            .flatMap((SimpleRestResponse<StorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param keyName The storage account key name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    public StorageBundle regenerateStorageAccountKey(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String keyName) {
        return regenerateStorageAccountKeyAsync(vaultBaseUrl, storageAccountName, keyName).block();
    }

    /**
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param keyName The storage account key name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<StorageBundle>> regenerateStorageAccountKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String keyName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        StorageAccountRegenerteKeyParameters parameters = new StorageAccountRegenerteKeyParameters();
        parameters.withKeyName(keyName);
        return service.regenerateStorageAccountKey(storageAccountName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param keyName The storage account key name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<StorageBundle> regenerateStorageAccountKeyAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String keyName) {
        return regenerateStorageAccountKeyWithRestResponseAsync(vaultBaseUrl, storageAccountName, keyName)
            .flatMap((SimpleRestResponse<StorageBundle> res) -> Mono.just(res.body()));
    }

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionListResult object if successful.
     */
    public SasDefinitionListResult getSasDefinitions(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return getSasDefinitionsAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SasDefinitionListResult>> getSasDefinitionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getSasDefinitions(storageAccountName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SasDefinitionListResult> getSasDefinitionsAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return getSasDefinitionsWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((SimpleRestResponse<SasDefinitionListResult> res) -> Mono.just(res.body()));
    }

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionListResult object if successful.
     */
    public SasDefinitionListResult getSasDefinitions(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults) {
        return getSasDefinitionsAsync(vaultBaseUrl, storageAccountName, maxresults).block();
    }

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SasDefinitionListResult>> getSasDefinitionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getSasDefinitions(storageAccountName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SasDefinitionListResult> getSasDefinitionsAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults) {
        return getSasDefinitionsWithRestResponseAsync(vaultBaseUrl, storageAccountName, maxresults)
            .flatMap((SimpleRestResponse<SasDefinitionListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSasDefinitionListResult object if successful.
     */
    public DeletedSasDefinitionListResult getDeletedSasDefinitions(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return getDeletedSasDefinitionsAsync(vaultBaseUrl, storageAccountName).block();
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedSasDefinitionListResult>> getDeletedSasDefinitionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final Integer maxresults = null;
        return service.getDeletedSasDefinitions(storageAccountName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedSasDefinitionListResult> getDeletedSasDefinitionsAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName) {
        return getDeletedSasDefinitionsWithRestResponseAsync(vaultBaseUrl, storageAccountName)
            .flatMap((SimpleRestResponse<DeletedSasDefinitionListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSasDefinitionListResult object if successful.
     */
    public DeletedSasDefinitionListResult getDeletedSasDefinitions(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults) {
        return getDeletedSasDefinitionsAsync(vaultBaseUrl, storageAccountName, maxresults).block();
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedSasDefinitionListResult>> getDeletedSasDefinitionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedSasDefinitions(storageAccountName, vaultBaseUrl, maxresults, this.apiVersion());
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedSasDefinitionListResult> getDeletedSasDefinitionsAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults) {
        return getDeletedSasDefinitionsWithRestResponseAsync(vaultBaseUrl, storageAccountName, maxresults)
            .flatMap((SimpleRestResponse<DeletedSasDefinitionListResult> res) -> Mono.just(res.body()));
    }

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSasDefinitionBundle object if successful.
     */
    public DeletedSasDefinitionBundle getDeletedSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return getDeletedSasDefinitionAsync(vaultBaseUrl, storageAccountName, sasDefinitionName).block();
    }

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedSasDefinitionBundle>> getDeletedSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (sasDefinitionName == null) {
            throw new IllegalArgumentException("Parameter sasDefinitionName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeletedSasDefinition(storageAccountName, sasDefinitionName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedSasDefinitionBundle> getDeletedSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return getDeletedSasDefinitionWithRestResponseAsync(vaultBaseUrl, storageAccountName, sasDefinitionName)
            .flatMap((SimpleRestResponse<DeletedSasDefinitionBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    public SasDefinitionBundle recoverDeletedSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return recoverDeletedSasDefinitionAsync(vaultBaseUrl, storageAccountName, sasDefinitionName).block();
    }

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SasDefinitionBundle>> recoverDeletedSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (sasDefinitionName == null) {
            throw new IllegalArgumentException("Parameter sasDefinitionName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.recoverDeletedSasDefinition(storageAccountName, sasDefinitionName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SasDefinitionBundle> recoverDeletedSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return recoverDeletedSasDefinitionWithRestResponseAsync(vaultBaseUrl, storageAccountName, sasDefinitionName)
            .flatMap((SimpleRestResponse<SasDefinitionBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSasDefinitionBundle object if successful.
     */
    public DeletedSasDefinitionBundle deleteSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return deleteSasDefinitionAsync(vaultBaseUrl, storageAccountName, sasDefinitionName).block();
    }

    /**
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<DeletedSasDefinitionBundle>> deleteSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (sasDefinitionName == null) {
            throw new IllegalArgumentException("Parameter sasDefinitionName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteSasDefinition(storageAccountName, sasDefinitionName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<DeletedSasDefinitionBundle> deleteSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return deleteSasDefinitionWithRestResponseAsync(vaultBaseUrl, storageAccountName, sasDefinitionName)
            .flatMap((SimpleRestResponse<DeletedSasDefinitionBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    public SasDefinitionBundle getSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return getSasDefinitionAsync(vaultBaseUrl, storageAccountName, sasDefinitionName).block();
    }

    /**
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SasDefinitionBundle>> getSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (sasDefinitionName == null) {
            throw new IllegalArgumentException("Parameter sasDefinitionName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getSasDefinition(storageAccountName, sasDefinitionName, vaultBaseUrl, this.apiVersion());
    }

    /**
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SasDefinitionBundle> getSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return getSasDefinitionWithRestResponseAsync(vaultBaseUrl, storageAccountName, sasDefinitionName)
            .flatMap((SimpleRestResponse<SasDefinitionBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    public SasDefinitionBundle setSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod) {
        return setSasDefinitionAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod).block();
    }

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SasDefinitionBundle>> setSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (sasDefinitionName == null) {
            throw new IllegalArgumentException("Parameter sasDefinitionName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (templateUri == null) {
            throw new IllegalArgumentException("Parameter templateUri is required and cannot be null.");
        }
        if (sasType == null) {
            throw new IllegalArgumentException("Parameter sasType is required and cannot be null.");
        }
        if (validityPeriod == null) {
            throw new IllegalArgumentException("Parameter validityPeriod is required and cannot be null.");
        }
        SasDefinitionCreateParameters parameters = new SasDefinitionCreateParameters();
        parameters.withTemplateUri(templateUri);
        parameters.withSasType(sasType);
        parameters.withValidityPeriod(validityPeriod);
        parameters.withSasDefinitionAttributes(null);
        parameters.withTags(null);
        return service.setSasDefinition(storageAccountName, sasDefinitionName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SasDefinitionBundle> setSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod) {
        return setSasDefinitionWithRestResponseAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod)
            .flatMap((SimpleRestResponse<SasDefinitionBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    public SasDefinitionBundle setSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags) {
        return setSasDefinitionAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod, sasDefinitionAttributes, tags).block();
    }

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SasDefinitionBundle>> setSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (sasDefinitionName == null) {
            throw new IllegalArgumentException("Parameter sasDefinitionName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        if (templateUri == null) {
            throw new IllegalArgumentException("Parameter templateUri is required and cannot be null.");
        }
        if (sasType == null) {
            throw new IllegalArgumentException("Parameter sasType is required and cannot be null.");
        }
        if (validityPeriod == null) {
            throw new IllegalArgumentException("Parameter validityPeriod is required and cannot be null.");
        }
        Validator.validate(sasDefinitionAttributes);
        Validator.validate(tags);
        SasDefinitionCreateParameters parameters = new SasDefinitionCreateParameters();
        parameters.withTemplateUri(templateUri);
        parameters.withSasType(sasType);
        parameters.withValidityPeriod(validityPeriod);
        parameters.withSasDefinitionAttributes(sasDefinitionAttributes);
        parameters.withTags(tags);
        return service.setSasDefinition(storageAccountName, sasDefinitionName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SasDefinitionBundle> setSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags) {
        return setSasDefinitionWithRestResponseAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod, sasDefinitionAttributes, tags)
            .flatMap((SimpleRestResponse<SasDefinitionBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    public SasDefinitionBundle updateSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return updateSasDefinitionAsync(vaultBaseUrl, storageAccountName, sasDefinitionName).block();
    }

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SasDefinitionBundle>> updateSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (sasDefinitionName == null) {
            throw new IllegalArgumentException("Parameter sasDefinitionName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        SasDefinitionUpdateParameters parameters = new SasDefinitionUpdateParameters();
        parameters.withTemplateUri(null);
        parameters.withSasType(null);
        parameters.withValidityPeriod(null);
        parameters.withSasDefinitionAttributes(null);
        parameters.withTags(null);
        return service.updateSasDefinition(storageAccountName, sasDefinitionName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SasDefinitionBundle> updateSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName) {
        return updateSasDefinitionWithRestResponseAsync(vaultBaseUrl, storageAccountName, sasDefinitionName)
            .flatMap((SimpleRestResponse<SasDefinitionBundle> res) -> Mono.just(res.body()));
    }

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    public SasDefinitionBundle updateSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, String templateUri, SasTokenType sasType, String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags) {
        return updateSasDefinitionAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod, sasDefinitionAttributes, tags).block();
    }

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SimpleRestResponse<SasDefinitionBundle>> updateSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, String templateUri, SasTokenType sasType, String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags) {
        if (vaultBaseUrl == null) {
            throw new IllegalArgumentException("Parameter vaultBaseUrl is required and cannot be null.");
        }
        if (storageAccountName == null) {
            throw new IllegalArgumentException("Parameter storageAccountName is required and cannot be null.");
        }
        if (sasDefinitionName == null) {
            throw new IllegalArgumentException("Parameter sasDefinitionName is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(sasDefinitionAttributes);
        Validator.validate(tags);
        SasDefinitionUpdateParameters parameters = new SasDefinitionUpdateParameters();
        parameters.withTemplateUri(templateUri);
        parameters.withSasType(sasType);
        parameters.withValidityPeriod(validityPeriod);
        parameters.withSasDefinitionAttributes(sasDefinitionAttributes);
        parameters.withTags(tags);
        return service.updateSasDefinition(storageAccountName, sasDefinitionName, vaultBaseUrl, this.apiVersion(), parameters);
    }

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<SasDefinitionBundle> updateSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, String templateUri, SasTokenType sasType, String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags) {
        return updateSasDefinitionWithRestResponseAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod, sasDefinitionAttributes, tags)
            .flatMap((SimpleRestResponse<SasDefinitionBundle> res) -> Mono.just(res.body()));
    }
}
