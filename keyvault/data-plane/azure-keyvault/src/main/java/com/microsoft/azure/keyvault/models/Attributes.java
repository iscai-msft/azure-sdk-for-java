/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.keyvault.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * The object attributes managed by the KeyVault service.
 */
public class Attributes {
    /**
     * Determines whether the object is enabled.
     */
    @JsonProperty(value = "enabled")
    private Boolean enabled;

    /**
     * Not before date in UTC.
     */
    @JsonProperty(value = "nbf")
    private Long notBefore;

    /**
     * Expiry date in UTC.
     */
    @JsonProperty(value = "exp")
    private Long expires;

    /**
     * Creation time in UTC.
     */
    @JsonProperty(value = "created", access = JsonProperty.Access.WRITE_ONLY)
    private Long created;

    /**
     * Last updated time in UTC.
     */
    @JsonProperty(value = "updated", access = JsonProperty.Access.WRITE_ONLY)
    private Long updated;

    /**
     * Get the enabled value.
     *
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled value.
     *
     * @param enabled the enabled value to set.
     * @return the Attributes object itself.
     */
    public Attributes withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the notBefore value.
     *
     * @return the notBefore value.
     */
    public Long notBefore() {
        return this.notBefore;
    }

    /**
     * Set the notBefore value.
     *
     * @param notBefore the notBefore value to set.
     * @return the Attributes object itself.
     */
    public Attributes withNotBefore(Long notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    /**
     * Get the expires value.
     *
     * @return the expires value.
     */
    public Long expires() {
        return this.expires;
    }

    /**
     * Set the expires value.
     *
     * @param expires the expires value to set.
     * @return the Attributes object itself.
     */
    public Attributes withExpires(Long expires) {
        this.expires = expires;
        return this;
    }

    /**
     * Get the created value.
     *
     * @return the created value.
     */
    public Long created() {
        return this.created;
    }

    /**
     * Get the updated value.
     *
     * @return the updated value.
     */
    public Long updated() {
        return this.updated;
    }
}
