/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.keyvault;

import com.azure.common.http.rest.RestVoidResponse;
import com.azure.common.http.rest.SimpleRestResponse;
import com.microsoft.azure.keyvault.models.BackupCertificateResult;
import com.microsoft.azure.keyvault.models.BackupKeyResult;
import com.microsoft.azure.keyvault.models.BackupSecretResult;
import com.microsoft.azure.keyvault.models.BackupStorageResult;
import com.microsoft.azure.keyvault.models.CertificateAttributes;
import com.microsoft.azure.keyvault.models.CertificateBundle;
import com.microsoft.azure.keyvault.models.CertificateIssuerListResult;
import com.microsoft.azure.keyvault.models.CertificateListResult;
import com.microsoft.azure.keyvault.models.CertificateOperation;
import com.microsoft.azure.keyvault.models.CertificatePolicy;
import com.microsoft.azure.keyvault.models.Contacts;
import com.microsoft.azure.keyvault.models.DeletedCertificateBundle;
import com.microsoft.azure.keyvault.models.DeletedCertificateListResult;
import com.microsoft.azure.keyvault.models.DeletedKeyBundle;
import com.microsoft.azure.keyvault.models.DeletedKeyListResult;
import com.microsoft.azure.keyvault.models.DeletedSasDefinitionBundle;
import com.microsoft.azure.keyvault.models.DeletedSasDefinitionListResult;
import com.microsoft.azure.keyvault.models.DeletedSecretBundle;
import com.microsoft.azure.keyvault.models.DeletedSecretListResult;
import com.microsoft.azure.keyvault.models.DeletedStorageBundle;
import com.microsoft.azure.keyvault.models.DeletedStorageListResult;
import com.microsoft.azure.keyvault.models.IssuerAttributes;
import com.microsoft.azure.keyvault.models.IssuerBundle;
import com.microsoft.azure.keyvault.models.IssuerCredentials;
import com.microsoft.azure.keyvault.models.JsonWebKey;
import com.microsoft.azure.keyvault.models.JsonWebKeyCurveName;
import com.microsoft.azure.keyvault.models.JsonWebKeyEncryptionAlgorithm;
import com.microsoft.azure.keyvault.models.JsonWebKeyOperation;
import com.microsoft.azure.keyvault.models.JsonWebKeySignatureAlgorithm;
import com.microsoft.azure.keyvault.models.JsonWebKeyType;
import com.microsoft.azure.keyvault.models.KeyAttributes;
import com.microsoft.azure.keyvault.models.KeyBundle;
import com.microsoft.azure.keyvault.models.KeyListResult;
import com.microsoft.azure.keyvault.models.KeyOperationResult;
import com.microsoft.azure.keyvault.models.KeyVaultErrorException;
import com.microsoft.azure.keyvault.models.KeyVerifyResult;
import com.microsoft.azure.keyvault.models.OrganizationDetails;
import com.microsoft.azure.keyvault.models.SasDefinitionAttributes;
import com.microsoft.azure.keyvault.models.SasDefinitionBundle;
import com.microsoft.azure.keyvault.models.SasDefinitionListResult;
import com.microsoft.azure.keyvault.models.SasTokenType;
import com.microsoft.azure.keyvault.models.SecretAttributes;
import com.microsoft.azure.keyvault.models.SecretBundle;
import com.microsoft.azure.keyvault.models.SecretListResult;
import com.microsoft.azure.keyvault.models.StorageAccountAttributes;
import com.microsoft.azure.keyvault.models.StorageBundle;
import com.microsoft.azure.keyvault.models.StorageListResult;
import java.util.List;
import java.util.Map;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * The interface for KeyVaultClientBase class.
 */
public interface KeyVaultClientBase {
    /**
     * Gets Client API version.
     *
     * @return the apiVersion value.
     */
    String apiVersion();

    /**
     * Sets Client API version.
     *
     * @param apiVersion the apiVersion value.
     * @return the service client itself.
     */
    KeyVaultClientBase withApiVersion(String apiVersion);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle createKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> createKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> createKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @param keySize The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * @param keyOps the List&lt;JsonWebKeyOperation&gt; value.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param curve Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle createKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags, JsonWebKeyCurveName curve);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @param keySize The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * @param keyOps the List&lt;JsonWebKeyOperation&gt; value.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param curve Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> createKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags, JsonWebKeyCurveName curve);

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name for the new key. The system will generate the version name for the new key.
     * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'.
     * @param keySize The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * @param keyOps the List&lt;JsonWebKeyOperation&gt; value.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param curve Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> createKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKeyType kty, Integer keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags, JsonWebKeyCurveName curve);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle importKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> importKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> importKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @param hsm Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle importKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @param hsm Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> importKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName Name for the imported key.
     * @param key The Json web key.
     * @param hsm Whether to import as a hardware key (HSM) or software key.
     * @param keyAttributes The key management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> importKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull JsonWebKey key, Boolean hsm, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedKeyBundle object if successful.
     */
    DeletedKeyBundle deleteKey(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedKeyBundle>> deleteKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedKeyBundle> deleteKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle updateKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> updateKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> updateKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @param keyOps Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle updateKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @param keyOps Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> updateKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @param keyOps Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     * @param keyAttributes the KeyAttributes value.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> updateKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Map<String, String> tags);

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle getKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion);

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> getKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion);

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> getKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyListResult object if successful.
     */
    KeyListResult getKeyVersions(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyListResult>> getKeyVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyListResult> getKeyVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyListResult object if successful.
     */
    KeyListResult getKeyVersions(@NonNull String vaultBaseUrl, @NonNull String keyName, Integer maxresults);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyListResult>> getKeyVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, Integer maxresults);

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyListResult> getKeyVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, Integer maxresults);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyListResult object if successful.
     */
    KeyListResult getKeys(@NonNull String vaultBaseUrl);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyListResult>> getKeysWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyListResult> getKeysAsync(@NonNull String vaultBaseUrl);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyListResult object if successful.
     */
    KeyListResult getKeys(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyListResult>> getKeysWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyListResult> getKeysAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupKeyResult object if successful.
     */
    BackupKeyResult backupKey(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<BackupKeyResult>> backupKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<BackupKeyResult> backupKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle restoreKey(@NonNull String vaultBaseUrl, @NonNull byte[] keyBundleBackup);

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> restoreKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull byte[] keyBundleBackup);

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyBundleBackup The backup blob associated with a key bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> restoreKeyAsync(@NonNull String vaultBaseUrl, @NonNull byte[] keyBundleBackup);

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    KeyOperationResult encrypt(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyOperationResult>> encryptWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyOperationResult> encryptAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    KeyOperationResult decrypt(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyOperationResult>> decryptWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyOperationResult> decryptAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    KeyOperationResult sign(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyOperationResult>> signWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyOperationResult> signAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param digest The digest used for signing.
     * @param signature The signature to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyVerifyResult object if successful.
     */
    KeyVerifyResult verify(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] digest, @NonNull byte[] signature);

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param digest The digest used for signing.
     * @param signature The signature to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyVerifyResult>> verifyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] digest, @NonNull byte[] signature);

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'.
     * @param digest The digest used for signing.
     * @param signature The signature to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyVerifyResult> verifyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeySignatureAlgorithm algorithm, @NonNull byte[] digest, @NonNull byte[] signature);

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    KeyOperationResult wrapKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyOperationResult>> wrapKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyOperationResult> wrapKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyOperationResult object if successful.
     */
    KeyOperationResult unwrapKey(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyOperationResult>> unwrapKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'.
     * @param value the byte[] value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyOperationResult> unwrapKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName, @NonNull String keyVersion, @NonNull JsonWebKeyEncryptionAlgorithm algorithm, @NonNull byte[] value);

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedKeyListResult object if successful.
     */
    DeletedKeyListResult getDeletedKeys(@NonNull String vaultBaseUrl);

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedKeyListResult>> getDeletedKeysWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedKeyListResult> getDeletedKeysAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedKeyListResult object if successful.
     */
    DeletedKeyListResult getDeletedKeys(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedKeyListResult>> getDeletedKeysWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedKeyListResult> getDeletedKeysAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedKeyBundle object if successful.
     */
    DeletedKeyBundle getDeletedKey(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedKeyBundle>> getDeletedKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedKeyBundle> getDeletedKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void purgeDeletedKey(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> purgeDeletedKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> purgeDeletedKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the deleted key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the KeyBundle object if successful.
     */
    KeyBundle recoverDeletedKey(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the deleted key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<KeyBundle>> recoverDeletedKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param keyName The name of the deleted key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<KeyBundle> recoverDeletedKeyAsync(@NonNull String vaultBaseUrl, @NonNull String keyName);

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    SecretBundle setSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value);

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretBundle>> setSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value);

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretBundle> setSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value);

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    SecretBundle setSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes);

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretBundle>> setSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes);

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param value The value of the secret.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretBundle> setSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String value, Map<String, String> tags, String contentType, SecretAttributes secretAttributes);

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSecretBundle object if successful.
     */
    DeletedSecretBundle deleteSecret(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedSecretBundle>> deleteSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedSecretBundle> deleteSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    SecretBundle updateSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretBundle>> updateSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretBundle> updateSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    SecretBundle updateSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretBundle>> updateSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags);

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param contentType Type of the secret value such as a password.
     * @param secretAttributes The secret management attributes.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretBundle> updateSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion, String contentType, SecretAttributes secretAttributes, Map<String, String> tags);

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    SecretBundle getSecret(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion);

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretBundle>> getSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion);

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretBundle> getSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, @NonNull String secretVersion);

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretListResult object if successful.
     */
    SecretListResult getSecrets(@NonNull String vaultBaseUrl);

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretListResult>> getSecretsWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretListResult> getSecretsAsync(@NonNull String vaultBaseUrl);

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretListResult object if successful.
     */
    SecretListResult getSecrets(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretListResult>> getSecretsWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretListResult> getSecretsAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretListResult object if successful.
     */
    SecretListResult getSecretVersions(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretListResult>> getSecretVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretListResult> getSecretVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretListResult object if successful.
     */
    SecretListResult getSecretVersions(@NonNull String vaultBaseUrl, @NonNull String secretName, Integer maxresults);

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretListResult>> getSecretVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, Integer maxresults);

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretListResult> getSecretVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String secretName, Integer maxresults);

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSecretListResult object if successful.
     */
    DeletedSecretListResult getDeletedSecrets(@NonNull String vaultBaseUrl);

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedSecretListResult>> getDeletedSecretsWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedSecretListResult> getDeletedSecretsAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSecretListResult object if successful.
     */
    DeletedSecretListResult getDeletedSecrets(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedSecretListResult>> getDeletedSecretsWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedSecretListResult> getDeletedSecretsAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSecretBundle object if successful.
     */
    DeletedSecretBundle getDeletedSecret(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedSecretBundle>> getDeletedSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedSecretBundle> getDeletedSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void purgeDeletedSecret(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> purgeDeletedSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> purgeDeletedSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the deleted secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    SecretBundle recoverDeletedSecret(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the deleted secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretBundle>> recoverDeletedSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the deleted secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretBundle> recoverDeletedSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupSecretResult object if successful.
     */
    BackupSecretResult backupSecret(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<BackupSecretResult>> backupSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<BackupSecretResult> backupSecretAsync(@NonNull String vaultBaseUrl, @NonNull String secretName);

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretBundleBackup The backup blob associated with a secret bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecretBundle object if successful.
     */
    SecretBundle restoreSecret(@NonNull String vaultBaseUrl, @NonNull byte[] secretBundleBackup);

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretBundleBackup The backup blob associated with a secret bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SecretBundle>> restoreSecretWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull byte[] secretBundleBackup);

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param secretBundleBackup The backup blob associated with a secret bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SecretBundle> restoreSecretAsync(@NonNull String vaultBaseUrl, @NonNull byte[] secretBundleBackup);

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateListResult object if successful.
     */
    CertificateListResult getCertificates(@NonNull String vaultBaseUrl);

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateListResult>> getCertificatesWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateListResult> getCertificatesAsync(@NonNull String vaultBaseUrl);

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateListResult object if successful.
     */
    CertificateListResult getCertificates(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending);

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateListResult>> getCertificatesWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending);

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateListResult> getCertificatesAsync(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending);

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedCertificateBundle object if successful.
     */
    DeletedCertificateBundle deleteCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedCertificateBundle>> deleteCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedCertificateBundle> deleteCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts The contacts for the key vault certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Contacts object if successful.
     */
    Contacts setCertificateContacts(@NonNull String vaultBaseUrl, @NonNull Contacts contacts);

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts The contacts for the key vault certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<Contacts>> setCertificateContactsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull Contacts contacts);

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts The contacts for the key vault certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Contacts> setCertificateContactsAsync(@NonNull String vaultBaseUrl, @NonNull Contacts contacts);

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Contacts object if successful.
     */
    Contacts getCertificateContacts(@NonNull String vaultBaseUrl);

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<Contacts>> getCertificateContactsWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Contacts> getCertificateContactsAsync(@NonNull String vaultBaseUrl);

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Contacts object if successful.
     */
    Contacts deleteCertificateContacts(@NonNull String vaultBaseUrl);

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<Contacts>> deleteCertificateContactsWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Contacts> deleteCertificateContactsAsync(@NonNull String vaultBaseUrl);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateIssuerListResult object if successful.
     */
    CertificateIssuerListResult getCertificateIssuers(@NonNull String vaultBaseUrl);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateIssuerListResult>> getCertificateIssuersWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateIssuerListResult> getCertificateIssuersAsync(@NonNull String vaultBaseUrl);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateIssuerListResult object if successful.
     */
    CertificateIssuerListResult getCertificateIssuers(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateIssuerListResult>> getCertificateIssuersWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateIssuerListResult> getCertificateIssuersAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    IssuerBundle setCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider);

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<IssuerBundle>> setCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider);

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<IssuerBundle> setCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider);

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    IssuerBundle setCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<IssuerBundle>> setCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<IssuerBundle> setCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, @NonNull String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    IssuerBundle updateCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<IssuerBundle>> updateCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<IssuerBundle> updateCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    IssuerBundle updateCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<IssuerBundle>> updateCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param credentials The credentials to be used for the issuer.
     * @param organizationDetails Details of the organization as provided to the issuer.
     * @param attributes Attributes of the issuer object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<IssuerBundle> updateCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName, String provider, IssuerCredentials credentials, OrganizationDetails organizationDetails, IssuerAttributes attributes);

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    IssuerBundle getCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<IssuerBundle>> getCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<IssuerBundle> getCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IssuerBundle object if successful.
     */
    IssuerBundle deleteCertificateIssuer(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<IssuerBundle>> deleteCertificateIssuerWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<IssuerBundle> deleteCertificateIssuerAsync(@NonNull String vaultBaseUrl, @NonNull String issuerName);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    CertificateOperation createCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateOperation>> createCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateOperation> createCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    CertificateOperation createCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateOperation>> createCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateOperation> createCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle importCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> importCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> importCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle importCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> importCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
     * @param password If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> importCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String base64EncodedCertificate, String password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateListResult object if successful.
     */
    CertificateListResult getCertificateVersions(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateListResult>> getCertificateVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateListResult> getCertificateVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateListResult object if successful.
     */
    CertificateListResult getCertificateVersions(@NonNull String vaultBaseUrl, @NonNull String certificateName, Integer maxresults);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateListResult>> getCertificateVersionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, Integer maxresults);

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateListResult> getCertificateVersionsAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, Integer maxresults);

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificatePolicy object if successful.
     */
    CertificatePolicy getCertificatePolicy(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificatePolicy>> getCertificatePolicyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificatePolicy> getCertificatePolicyAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificatePolicy object if successful.
     */
    CertificatePolicy updateCertificatePolicy(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull CertificatePolicy certificatePolicy);

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificatePolicy>> updateCertificatePolicyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull CertificatePolicy certificatePolicy);

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificatePolicy> updateCertificatePolicyAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull CertificatePolicy certificatePolicy);

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle updateCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion);

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> updateCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion);

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> updateCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion);

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle updateCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> updateCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param certificatePolicy The management policy for the certificate.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> updateCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle getCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion);

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> getCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion);

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> getCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull String certificateVersion);

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    CertificateOperation updateCertificateOperation(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull boolean cancellationRequested);

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateOperation>> updateCertificateOperationWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull boolean cancellationRequested);

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateOperation> updateCertificateOperationAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull boolean cancellationRequested);

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    CertificateOperation getCertificateOperation(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateOperation>> getCertificateOperationWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateOperation> getCertificateOperationAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateOperation object if successful.
     */
    CertificateOperation deleteCertificateOperation(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateOperation>> deleteCertificateOperationWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateOperation> deleteCertificateOperationAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle mergeCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> mergeCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> mergeCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle mergeCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> mergeCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @param certificateAttributes The attributes of the certificate (optional).
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> mergeCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName, @NonNull List<byte[]> x509Certificates, CertificateAttributes certificateAttributes, Map<String, String> tags);

    /**
     * Backs up the specified certificate.
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupCertificateResult object if successful.
     */
    BackupCertificateResult backupCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Backs up the specified certificate.
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<BackupCertificateResult>> backupCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Backs up the specified certificate.
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<BackupCertificateResult> backupCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Restores a backed up certificate to a vault.
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateBundleBackup The backup blob associated with a certificate bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle restoreCertificate(@NonNull String vaultBaseUrl, @NonNull byte[] certificateBundleBackup);

    /**
     * Restores a backed up certificate to a vault.
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateBundleBackup The backup blob associated with a certificate bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> restoreCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull byte[] certificateBundleBackup);

    /**
     * Restores a backed up certificate to a vault.
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateBundleBackup The backup blob associated with a certificate bundle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> restoreCertificateAsync(@NonNull String vaultBaseUrl, @NonNull byte[] certificateBundleBackup);

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedCertificateListResult object if successful.
     */
    DeletedCertificateListResult getDeletedCertificates(@NonNull String vaultBaseUrl);

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedCertificateListResult>> getDeletedCertificatesWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedCertificateListResult> getDeletedCertificatesAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedCertificateListResult object if successful.
     */
    DeletedCertificateListResult getDeletedCertificates(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending);

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedCertificateListResult>> getDeletedCertificatesWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending);

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedCertificateListResult> getDeletedCertificatesAsync(@NonNull String vaultBaseUrl, Integer maxresults, Boolean includePending);

    /**
     * Retrieves information about the specified deleted certificate.
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedCertificateBundle object if successful.
     */
    DeletedCertificateBundle getDeletedCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Retrieves information about the specified deleted certificate.
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedCertificateBundle>> getDeletedCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Retrieves information about the specified deleted certificate.
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedCertificateBundle> getDeletedCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Permanently deletes the specified deleted certificate.
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void purgeDeletedCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Permanently deletes the specified deleted certificate.
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> purgeDeletedCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Permanently deletes the specified deleted certificate.
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> purgeDeletedCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the deleted certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CertificateBundle object if successful.
     */
    CertificateBundle recoverDeletedCertificate(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the deleted certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<CertificateBundle>> recoverDeletedCertificateWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the deleted certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<CertificateBundle> recoverDeletedCertificateAsync(@NonNull String vaultBaseUrl, @NonNull String certificateName);

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageListResult object if successful.
     */
    StorageListResult getStorageAccounts(@NonNull String vaultBaseUrl);

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageListResult>> getStorageAccountsWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageListResult> getStorageAccountsAsync(@NonNull String vaultBaseUrl);

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageListResult object if successful.
     */
    StorageListResult getStorageAccounts(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageListResult>> getStorageAccountsWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageListResult> getStorageAccountsAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedStorageListResult object if successful.
     */
    DeletedStorageListResult getDeletedStorageAccounts(@NonNull String vaultBaseUrl);

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedStorageListResult>> getDeletedStorageAccountsWithRestResponseAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedStorageListResult> getDeletedStorageAccountsAsync(@NonNull String vaultBaseUrl);

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedStorageListResult object if successful.
     */
    DeletedStorageListResult getDeletedStorageAccounts(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedStorageListResult>> getDeletedStorageAccountsWithRestResponseAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedStorageListResult> getDeletedStorageAccountsAsync(@NonNull String vaultBaseUrl, Integer maxresults);

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedStorageBundle object if successful.
     */
    DeletedStorageBundle getDeletedStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedStorageBundle>> getDeletedStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedStorageBundle> getDeletedStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void purgeDeletedStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<RestVoidResponse> purgeDeletedStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Void> purgeDeletedStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    StorageBundle recoverDeletedStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageBundle>> recoverDeletedStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageBundle> recoverDeletedStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupStorageResult object if successful.
     */
    BackupStorageResult backupStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<BackupStorageResult>> backupStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<BackupStorageResult> backupStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageBundleBackup The backup blob associated with a storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    StorageBundle restoreStorageAccount(@NonNull String vaultBaseUrl, @NonNull byte[] storageBundleBackup);

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageBundleBackup The backup blob associated with a storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageBundle>> restoreStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull byte[] storageBundleBackup);

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageBundleBackup The backup blob associated with a storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageBundle> restoreStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull byte[] storageBundleBackup);

    /**
     * Deletes a storage account. This operation requires the storage/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedStorageBundle object if successful.
     */
    DeletedStorageBundle deleteStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Deletes a storage account. This operation requires the storage/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedStorageBundle>> deleteStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Deletes a storage account. This operation requires the storage/delete permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedStorageBundle> deleteStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    StorageBundle getStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageBundle>> getStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageBundle> getStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    StorageBundle setStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey);

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageBundle>> setStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey);

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageBundle> setStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey);

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    StorageBundle setStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags);

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageBundle>> setStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags);

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param resourceId Storage account resource id.
     * @param activeKeyName Current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageBundle> setStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String resourceId, @NonNull String activeKeyName, @NonNull boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    StorageBundle updateStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageBundle>> updateStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageBundle> updateStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param activeKeyName The current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    StorageBundle updateStorageAccount(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, String activeKeyName, Boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param activeKeyName The current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageBundle>> updateStorageAccountWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, String activeKeyName, Boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param activeKeyName The current active storage account key name.
     * @param autoRegenerateKey whether keyvault should manage the storage account for the user.
     * @param regenerationPeriod The key regeneration time duration specified in ISO-8601 format.
     * @param storageAccountAttributes The attributes of the storage account.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageBundle> updateStorageAccountAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, String activeKeyName, Boolean autoRegenerateKey, String regenerationPeriod, StorageAccountAttributes storageAccountAttributes, Map<String, String> tags);

    /**
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param keyName The storage account key name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StorageBundle object if successful.
     */
    StorageBundle regenerateStorageAccountKey(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String keyName);

    /**
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param keyName The storage account key name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<StorageBundle>> regenerateStorageAccountKeyWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String keyName);

    /**
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param keyName The storage account key name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StorageBundle> regenerateStorageAccountKeyAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String keyName);

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionListResult object if successful.
     */
    SasDefinitionListResult getSasDefinitions(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SasDefinitionListResult>> getSasDefinitionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SasDefinitionListResult> getSasDefinitionsAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionListResult object if successful.
     */
    SasDefinitionListResult getSasDefinitions(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults);

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SasDefinitionListResult>> getSasDefinitionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults);

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SasDefinitionListResult> getSasDefinitionsAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults);

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSasDefinitionListResult object if successful.
     */
    DeletedSasDefinitionListResult getDeletedSasDefinitions(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedSasDefinitionListResult>> getDeletedSasDefinitionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedSasDefinitionListResult> getDeletedSasDefinitionsAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName);

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSasDefinitionListResult object if successful.
     */
    DeletedSasDefinitionListResult getDeletedSasDefinitions(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults);

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedSasDefinitionListResult>> getDeletedSasDefinitionsWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults);

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedSasDefinitionListResult> getDeletedSasDefinitionsAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, Integer maxresults);

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSasDefinitionBundle object if successful.
     */
    DeletedSasDefinitionBundle getDeletedSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedSasDefinitionBundle>> getDeletedSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedSasDefinitionBundle> getDeletedSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    SasDefinitionBundle recoverDeletedSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SasDefinitionBundle>> recoverDeletedSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SasDefinitionBundle> recoverDeletedSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedSasDefinitionBundle object if successful.
     */
    DeletedSasDefinitionBundle deleteSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<DeletedSasDefinitionBundle>> deleteSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<DeletedSasDefinitionBundle> deleteSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    SasDefinitionBundle getSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SasDefinitionBundle>> getSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SasDefinitionBundle> getSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    SasDefinitionBundle setSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod);

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SasDefinitionBundle>> setSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod);

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SasDefinitionBundle> setSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod);

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    SasDefinitionBundle setSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags);

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SasDefinitionBundle>> setSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags);

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SasDefinitionBundle> setSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, @NonNull String templateUri, @NonNull SasTokenType sasType, @NonNull String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    SasDefinitionBundle updateSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SasDefinitionBundle>> updateSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SasDefinitionBundle> updateSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName);

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SasDefinitionBundle object if successful.
     */
    SasDefinitionBundle updateSasDefinition(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, String templateUri, SasTokenType sasType, String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SimpleRestResponse<SasDefinitionBundle>> updateSasDefinitionWithRestResponseAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, String templateUri, SasTokenType sasType, String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags);

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param storageAccountName The name of the storage account.
     * @param sasDefinitionName The name of the SAS definition.
     * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.
     * @param sasType The type of SAS token the SAS definition will create. Possible values include: 'account', 'service'.
     * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.
     * @param sasDefinitionAttributes The attributes of the SAS definition.
     * @param tags Application specific metadata in the form of key-value pairs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<SasDefinitionBundle> updateSasDefinitionAsync(@NonNull String vaultBaseUrl, @NonNull String storageAccountName, @NonNull String sasDefinitionName, String templateUri, SasTokenType sasType, String validityPeriod, SasDefinitionAttributes sasDefinitionAttributes, Map<String, String> tags);
}
